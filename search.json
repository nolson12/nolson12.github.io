[
  {
    "objectID": "posts/post-with-code/index.html",
    "href": "posts/post-with-code/index.html",
    "title": "Post With Code",
    "section": "",
    "text": "This is a post with executable code.\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Welcome To My Blog",
    "section": "",
    "text": "This is the first post in a Quarto blog. Welcome!\n\nSince this post doesn’t specify an explicit image, the first image in the post will be used in the listing page of posts."
  },
  {
    "objectID": "posts/starwars/starwars_df.html",
    "href": "posts/starwars/starwars_df.html",
    "title": "Starwars",
    "section": "",
    "text": "Let’s analyze the starwars data:"
  },
  {
    "objectID": "posts/starwars/starwars_df.html#variable-description-for-starwars-data.frame",
    "href": "posts/starwars/starwars_df.html#variable-description-for-starwars-data.frame",
    "title": "Starwars",
    "section": "Variable Description for starwars data.frame",
    "text": "Variable Description for starwars data.frame\nThe following describes the variables in the starwars data.frame.\n\nfilms List of films the character appeared in\nname Name of the character\nspecies Name of species\nheight Height (cm)\nmass Weight (kg)\nhair_color, skin_color, eye_color Hair, skin, and eye colors\nbirth_year Year born (BBY = Before Battle of Yavin)\nsex The biological sex of the character, namely male, female, hermaphroditic, or none (as in the case for Droids).\ngender The gender role or gender identity of the character as determined by their personality or the way they were programmed (as in the case for Droids).\nhomeworld Name of homeworld"
  },
  {
    "objectID": "posts/starwars/starwars_df.html#human-vs.-droid",
    "href": "posts/starwars/starwars_df.html#human-vs.-droid",
    "title": "Starwars",
    "section": "Human vs. Droid",
    "text": "Human vs. Droid\n\nggplot(data = \n         starwars %>% \n         filter(species %in% c(\"Human\", \"Droid\"))) +\n  geom_boxplot(aes(x = species, y = mass, \n                   fill = species),\n               show.legend = FALSE)"
  },
  {
    "objectID": "posts/beer-markets/beer-markets.html",
    "href": "posts/beer-markets/beer-markets.html",
    "title": "Beer Markets",
    "section": "",
    "text": "Let’s analyze the beer_data data:"
  },
  {
    "objectID": "posts/beer-markets/beer-markets.html#variable-description-for-beer_data-data.frame",
    "href": "posts/beer-markets/beer-markets.html#variable-description-for-beer_data-data.frame",
    "title": "Beer Markets",
    "section": "Variable Description for beer_data data.frame",
    "text": "Variable Description for beer_data data.frame\nThe following describes the variables in the beer_data data.frame.\n\nhh: Household identifier\n_purchase_desc: Description of the purchase\nquantity: The quantity of beer purchased\nbrand: The brand of beer\ndollar_spent: The amount spent\nbeer_floz: Fluid ounces of beer\nprice_per_floz: Price per fluid ounce\ncontainer: Type of container\npromo: Whether the purchase was on promotion\nmarket: The market where the purchase was made\nDemographics: age, employment status, degree, class of worker (cow), race, and household information like microwave, dishwasher, tvcable, singlefamilyhome, and npeople (number of people in the household)"
  },
  {
    "objectID": "posts/beer-markets/beer-markets.html#purchase-patterns",
    "href": "posts/beer-markets/beer-markets.html#purchase-patterns",
    "title": "Beer Markets",
    "section": "Purchase Patterns",
    "text": "Purchase Patterns\nWe’ll explore the purchase patterns in the dataset. This includes understanding the most popular brands, the average quantity purchased, and spending habits across different markets. Here are some specific analyses we can perform:\n\nCalculate the total quantity and spending for each brand.\nFind the average quantity purchased and average spending per purchase.\nCompare the total spending across different markets.\n\nI’ll begin with these analyses and create visualizations to help us understand the data better. Let’s start by calculating the total quantity and spending for each brand.\n\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Reading the CSV file\nbeer_data = pd.read_csv(\"https://bcdanl.github.io/data/beer_markets.csv\")\n\n# Setting up the visualisation settings\nsns.set(style=\"whitegrid\")\n\n# Calculate total quantity and spending for each brand\nbrand_summary = beer_data.groupby('brand').agg({'quantity':'sum', 'dollar_spent':'sum'}).reset_index()\n\n# Sort by total quantity and spending\nbrand_summary_sorted_quantity = brand_summary.sort_values('quantity', ascending=False)\nbrand_summary_sorted_spent = brand_summary.sort_values('dollar_spent', ascending=False)\n\n\n# Plotting total quantity for each brand\nplt.figure(figsize=(10, 8))\nsns.barplot(x='quantity', y='brand', data=brand_summary_sorted_quantity, palette='viridis')\nplt.title('Total Quantity of Beer Purchased by Brand')\nplt.xlabel('Total Quantity')\nplt.ylabel('Brand')\nplt.show()\n\n\n\n# Plotting total spending for each brand\nplt.figure(figsize=(10, 8))\nsns.barplot(x='dollar_spent', y='brand', data=brand_summary_sorted_spent, palette='viridis')\nplt.title('Total Spending on Beer by Brand')\nplt.xlabel('Total Spending')\nplt.ylabel('Brand')\nplt.show()\n\n\n\n\nThe bar charts above display the total quantity of beer purchased and the total spending by brand. From the looks of it, certain brands dominate in terms of quantity sold and total spending, indicating their popularity.\nNow, let’s calculate the average quantity purchased and average spending per purchase. For this, we’ll consider each row in the dataset as a separate purchase and compute the averages accordingly.\n\n# Calculate average quantity purchased and average spending per purchase\naverage_purchase = beer_data.groupby('brand').agg({\n    'quantity': 'mean', \n    'dollar_spent': 'mean'\n}).reset_index()\n\n# Sort by average quantity and average spending\naverage_purchase_sorted_quantity = average_purchase.sort_values('quantity', ascending=False)\naverage_purchase_sorted_spent = average_purchase.sort_values('dollar_spent', ascending=False)\n\n# Plotting average quantity for each brand\nplt.figure(figsize=(10, 8))\nsns.barplot(x='quantity', y='brand', data=average_purchase_sorted_quantity, palette='viridis')\nplt.title('Average Quantity of Beer Purchased by Brand')\nplt.xlabel('Average Quantity')\nplt.ylabel('Brand')\nplt.show()\n\n\n\n# Plotting average spending for each brand\nplt.figure(figsize=(10, 8))\nsns.barplot(x='dollar_spent', y='brand', data=average_purchase_sorted_spent, palette='viridis')\nplt.title('Average Spending on Beer by Brand')\nplt.xlabel('Average Spending')\nplt.ylabel('Brand')\nplt.show()\n\n\n\n\nThe visualizations above depict the average quantity of beer purchased per brand and the average spending per brand. This shows which brands tend to be bought in larger quantities on average and which brands tend to have higher spending per purchase, which could be indicative of their price point or the purchase of premium products.\nNext, we’ll look at the total spending across different markets to see if there are any notable differences in spending habits geographically. To do this, we’ll sum up the spending in each market and visualize it.\n\n# Calculate total spending in each market\nmarket_spending_summary = beer_data.groupby('market').agg({'dollar_spent':'sum'}).reset_index()\n\n# Sort by total spending\nmarket_spending_summary_sorted = market_spending_summary.sort_values('dollar_spent', ascending=False)\n\n# Plotting total spending in each market\nplt.figure(figsize=(12, 10))\nsns.barplot(x='dollar_spent', y='market', data=market_spending_summary_sorted, palette='viridis')\nplt.title('Total Spending on Beer by Market')\nplt.xlabel('Total Spending')\nplt.ylabel('Market')\nplt.show()\n\n\n\n\nThe bar chart illustrates the total spending on beer by market, showcasing the differences in spending habits across various regions. Some markets have significantly higher spending, which could be due to a variety of factors including market size, consumer preferences, or economic factors.\nNow, let’s move on to the second analysis:"
  },
  {
    "objectID": "posts/beer-markets/beer-markets.html#demographic-analysis",
    "href": "posts/beer-markets/beer-markets.html#demographic-analysis",
    "title": "Beer Markets",
    "section": "Demographic Analysis",
    "text": "Demographic Analysis\nWe will examine which demographics are buying what kind of beer and whether spending habits vary by demographics such as age, employment, and race. For this, we could look at:\n\nSpending by age group\nSpending by employment status\nSpending by race\n\nI’ll start by analyzing spending by age group.\n\n# Calculate total spending by age group\nage_group_spending = beer_data.groupby('age').agg({'dollar_spent':'sum'}).reset_index()\n\n# Sort by total spending\nage_group_spending_sorted = age_group_spending.sort_values('dollar_spent', ascending=False)\n\n# Plotting total spending by age group\nplt.figure(figsize=(10, 6))\nsns.barplot(x='dollar_spent', y='age', data=age_group_spending_sorted, palette='viridis')\nplt.title('Total Spending on Beer by Age Group')\nplt.xlabel('Total Spending')\nplt.ylabel('Age Group')\nplt.show()\n\n\n\n\nThe bar chart demonstrates the total spending on beer segmented by age group, highlighting which age groups spend the most on beer. It appears that certain age groups are more dominant in beer spending, which may align with the purchasing power or preferences of those groups.\nNext, we will examine spending by employment status.\n\n# Calculate total spending by employment status\nemployment_spending = beer_data.groupby('employment').agg({'dollar_spent':'sum'}).reset_index()\n\n# Sort by total spending\nemployment_spending_sorted = employment_spending.sort_values('dollar_spent', ascending=False)\n\n# Plotting total spending by employment status\nplt.figure(figsize=(10, 6))\nsns.barplot(x='dollar_spent', y='employment', data=employment_spending_sorted, palette='viridis')\nplt.title('Total Spending on Beer by Employment Status')\nplt.xlabel('Total Spending')\nplt.ylabel('Employment Status')\nplt.show()\n\n\n\n\nThe visualization shows the total spending on beer by employment status. We can see that certain employment groups, such as full-time workers, are spending more on beer, which might be related to their disposable income.\nFinally, let’s look at spending by race to complete the demographic analysis.\n\n# Calculate total spending by race\nrace_spending = beer_data.groupby('race').agg({'dollar_spent':'sum'}).reset_index()\n\n# Sort by total spending\nrace_spending_sorted = race_spending.sort_values('dollar_spent', ascending=False)\n\n# Plotting total spending by race\nplt.figure(figsize=(10, 6))\nsns.barplot(x='dollar_spent', y='race', data=race_spending_sorted, palette='viridis')\nplt.title('Total Spending on Beer by Race')\nplt.xlabel('Total Spending')\nplt.ylabel('Race')\nplt.show()\n\n\n\n\nThe bar chart above indicates the total spending on beer broken down by race, highlighting which racial groups account for the most beer spending within the dataset. This could reflect both the demographics of the regions where the data was collected and cultural preferences regarding beer.\nNow, let’s proceed to the third analysis:"
  },
  {
    "objectID": "posts/beer-markets/beer-markets.html#price-sensitivity",
    "href": "posts/beer-markets/beer-markets.html#price-sensitivity",
    "title": "Beer Markets",
    "section": "Price Sensitivity",
    "text": "Price Sensitivity\nWe’ll look at the price per fluid ounce and see if there are any trends or correlations with the quantity purchased or the brand popularity. To do this, we’ll calculate the average price per fluid ounce for each brand and then visualize how this relates to the average quantity purchased and the total quantity purchased by brand.\nFirst, let’s calculate the average price per fluid ounce for each brand.\n\n# Calculate average price per fluid ounce for each brand\nbrand_price_sensitivity = beer_data.groupby('brand').agg({\n    'price_per_floz': 'mean', \n    'quantity': 'sum'\n}).reset_index()\n\n# Sort by price per fluid ounce\nbrand_price_sensitivity_sorted = brand_price_sensitivity.sort_values('price_per_floz', ascending=True)\n\n# Plotting average price per fluid ounce for each brand and the total quantity purchased\nfig, ax1 = plt.subplots(figsize=(12, 10))\n\ncolor = 'tab:red'\nax1.set_xlabel('Brand')\nax1.set_ylabel('Average Price per Fluid Ounce', color=color)\nax1.bar(brand_price_sensitivity_sorted['brand'], brand_price_sensitivity_sorted['price_per_floz'], color=color)\nax1.tick_params(axis='y', labelcolor=color)\nax1.set_xticklabels(brand_price_sensitivity_sorted['brand'], rotation=90)\n\nax2 = ax1.twinx()  # instantiate a second axes that shares the same x-axis\ncolor = 'tab:blue'\nax2.set_ylabel('Total Quantity Purchased', color=color)  # we already handled the x-label with ax1\nax2.plot(brand_price_sensitivity_sorted['brand'], brand_price_sensitivity_sorted['quantity'], color=color)\nax2.tick_params(axis='y', labelcolor=color)\n\nfig.tight_layout()  # otherwise the right y-label is slightly clipped\nplt.title('Average Price per Fluid Ounce & Total Quantity Purchased by Brand')\nplt.show()\n\n\n\n\nIn the visualization, we have a bar graph showing the average price per fluid ounce for each brand (in red) and a line graph showing the total quantity purchased for each brand (in blue). This gives us a sense of whether there’s a relationship between the price and the quantity purchased. The x-axis labels are quite compressed due to the number of brands, but we can still observe trends such as whether lower-priced beers tend to be purchased in larger quantities.\nLastly, let’s move to the fourth analysis:"
  },
  {
    "objectID": "posts/beer-markets/beer-markets.html#promotional-impact",
    "href": "posts/beer-markets/beer-markets.html#promotional-impact",
    "title": "Beer Markets",
    "section": "Promotional Impact",
    "text": "Promotional Impact\nWe’ll assess the impact of promotions on the quantity of beer purchased. For this analysis, we can calculate the average quantity purchased with and without promotions and visualize the difference. We’ll do this for each brand to see which brands are most affected by promotions.\nLet’s begin this analysis by looking at the average quantity purchased with and without promotions for each brand.\n\n# Calculate average quantity purchased with and without promotions for each brand\npromo_impact = beer_data.groupby(['brand', 'promo']).agg({'quantity':'mean'}).reset_index()\n\n# Pivot the data to have promo and non-promo side by side for each brand\npromo_impact_pivot = promo_impact.pivot(index='brand', columns='promo', values='quantity').reset_index()\npromo_impact_pivot.columns = ['brand', 'non_promo', 'promo']\n\n# Calculate the difference in average quantity purchased between promo and non-promo\npromo_impact_pivot['promo_impact'] = promo_impact_pivot['promo'] - promo_impact_pivot['non_promo']\n\n# Sort by the impact of promo\npromo_impact_pivot_sorted = promo_impact_pivot.sort_values('promo_impact', ascending=False)\n\n# Plotting the difference in average quantity purchased between promo and non-promo for each brand\nplt.figure(figsize=(12, 10))\nsns.barplot(x='promo_impact', y='brand', data=promo_impact_pivot_sorted, palette='viridis')\nplt.title('Impact of Promotions on Average Quantity Purchased by Brand')\nplt.xlabel('Difference in Average Quantity Purchased (Promo - Non-Promo)')\nplt.ylabel('Brand')\nplt.show()\n\n\n\n\nThe bar chart illustrates the impact of promotions on the average quantity of beer purchased by brand. A positive value indicates that, on average, more beer is purchased when there is a promotion compared to when there isn’t. Some brands appear to be significantly more influenced by promotions, with customers buying more when the products are on sale or promotion.\nThis comprehensive analysis has provided insights into purchase patterns, demographic preferences, price sensitivity, and the impact of promotions on beer purchases."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Noah Olson",
    "section": "",
    "text": "Noah Olson majors in Accounting at SUNY Geneseo. When not working on data analytics, Noah enjoys spending time golfing and hanging out with his friends and family"
  },
  {
    "objectID": "index.html#education",
    "href": "index.html#education",
    "title": "Noah Olson",
    "section": "Education",
    "text": "Education\nState University of New York at Geneseo | Geneseo, NY  B.S. in Accounting | Aug 2020 - May 2024"
  },
  {
    "objectID": "index.html#experience",
    "href": "index.html#experience",
    "title": "Noah Olson",
    "section": "Experience",
    "text": "Experience\nConstellation Brands | Global Accounting Team Intern | May 2023 - Current  Deloitte | Tax Intern | May 2024 - August 2024"
  },
  {
    "objectID": "blog-listing.html",
    "href": "blog-listing.html",
    "title": "Insightful Analytics",
    "section": "",
    "text": "Order By\n       Default\n         \n          Title\n        \n         \n          Date - Oldest\n        \n         \n          Date - Newest\n        \n         \n          Author\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n  \n\n\n\n\nSpotify\n\n\n\n\n\n\n\n\n\nDec 10, 2023\n\n\nNoah Olson\n\n\n3 min\n\n\n\n\n\n\n  \n\n\n\n\nRestaurant\n\n\n\n\n\n\n\n\n\nDec 10, 2023\n\n\nNoah Olson\n\n\n3 min\n\n\n\n\n\n\n  \n\n\n\n\nNFL in 2022\n\n\n\n\n\n\n\n\n\nDec 10, 2023\n\n\nNoah Olson\n\n\n8 min\n\n\n\n\n\n\n  \n\n\n\n\nBeerMarkets\n\n\n\n\n\n\n\n\n\nDec 10, 2023\n\n\nNoah Olson\n\n\n6 min\n\n\n\n\n\n\n  \n\n\n\n\nWelcome To My Blog\n\n\n\n\n\n\n\n\n\nOct 27, 2023\n\n\nYOUR NAME\n\n\n1 min\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "project.html",
    "href": "project.html",
    "title": "DANL Project",
    "section": "",
    "text": "Throughout the semester, we learned several ways to analyze and depict data that may seem confusing at a first glance. We found the “restaurant” data set to be a great data set to use due to the depth and complexity of the information. Looking at the code we provided to analyze the data, we used a variety of different methods to describe the data as best as possible. We started with the skim function for some general information and organization. Next, we found the average scores of the restaurants among the different boroughs. By narrowing down the important boroughs, we then created several ggplot graphs including several bar charts to visualize the information provided. After in depth analytically procedures and visualization, we came to the conclusion that Manhattan has the overall best cuisine."
  },
  {
    "objectID": "project.html#summary-statistics",
    "href": "project.html#summary-statistics",
    "title": "DANL Project",
    "section": "2.1 Summary Statistics",
    "text": "2.1 Summary Statistics\n\nrestaurant &lt;- read_csv('https://bcdanl.github.io/data/DOHMH_NYC_Restaurant_Inspection.csv')\n\n\n\n\n  \n\n\n\nskim(restaurant) %&gt;% \n  select(-n_missing)\n\n\nData summary\n\n\nName\nrestaurant\n\n\nNumber of rows\n17633\n\n\nNumber of columns\n12\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n10\n\n\nnumeric\n2\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nDBA\n1\n1\n75\n0\n13914\n0\n\n\nBORO\n1\n5\n13\n0\n5\n0\n\n\nSTREET\n1\n5\n40\n0\n2038\n0\n\n\nCUISINE DESCRIPTION\n1\n4\n30\n0\n87\n0\n\n\nINSPECTION DATE\n1\n10\n10\n0\n751\n0\n\n\nACTION\n1\n33\n47\n0\n2\n0\n\n\nVIOLATION CODE\n1\n3\n5\n0\n60\n0\n\n\nVIOLATION DESCRIPTION\n1\n19\n940\n0\n101\n0\n\n\nCRITICAL FLAG\n1\n8\n12\n0\n2\n0\n\n\nGRADE\n1\n1\n1\n0\n3\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nCAMIS\n1\n47112537.51\n4197913.0\n30191841\n41551354\n50049290\n50094455\n50133690\n▁▁▃▁▇\n\n\nSCORE\n1\n10.44\n5.9\n0\n7\n10\n12\n86\n▇▁▁▁▁"
  },
  {
    "objectID": "project.html#mpg-and-a-type-of-cars",
    "href": "project.html#mpg-and-a-type-of-cars",
    "title": "DANL Project",
    "section": "2.2 MPG and a Type of Cars",
    "text": "2.2 MPG and a Type of Cars\nThe following boxplot shows how the distribution of highway MPG (hwy) varies by a type of cars (class) 🚙 🚚 🚐.\n\nggplot(data = mpg) +\n  geom_boxplot(aes(x = class, y = hwy, fill = class),\n               show.legend = F) +\n  labs(x = \"Class\", y = \"Highway\\nMPG\")"
  },
  {
    "objectID": "posts/Spotify/Spotify.html",
    "href": "posts/Spotify/Spotify.html",
    "title": "Spotify",
    "section": "",
    "text": "Let’s analyze the starwars data:\nstarwars &lt;- read_csv(\"https://bcdanl.github.io/data/starwars.csv\")"
  },
  {
    "objectID": "posts/Spotify/Spotify.html#variable-description-for-starwars-data.frame",
    "href": "posts/Spotify/Spotify.html#variable-description-for-starwars-data.frame",
    "title": "Spotify",
    "section": "Variable Description for starwars data.frame",
    "text": "Variable Description for starwars data.frame\nThe following describes the variables in the starwars data.frame.\n\nfilms List of films the character appeared in\nname Name of the character\nspecies Name of species\nheight Height (cm)\nmass Weight (kg)\nhair_color, skin_color, eye_color Hair, skin, and eye colors\nbirth_year Year born (BBY = Before Battle of Yavin)\nsex The biological sex of the character, namely male, female, hermaphroditic, or none (as in the case for Droids).\ngender The gender role or gender identity of the character as determined by their personality or the way they were programmed (as in the case for Droids).\nhomeworld Name of homeworld"
  },
  {
    "objectID": "posts/Spotify/Spotify.html#human-vs.-droid",
    "href": "posts/Spotify/Spotify.html#human-vs.-droid",
    "title": "Spotify",
    "section": "Human vs. Droid",
    "text": "Human vs. Droid\n\nggplot(data = \n         starwars %&gt;% \n         filter(species %in% c(\"Human\", \"Droid\"))) +\n  geom_boxplot(aes(x = species, y = mass, \n                   fill = species),\n               show.legend = FALSE)"
  },
  {
    "objectID": "posts/Beer Markets/BeerMarkets.html",
    "href": "posts/Beer Markets/BeerMarkets.html",
    "title": "BeerMarkets",
    "section": "",
    "text": "Let’s analyze the beer_mkts data:\nbeer_mkts &lt;- read_csv('https://bcdanl.github.io/data/beer_markets.csv')"
  },
  {
    "objectID": "posts/Beer Markets/BeerMarkets.html#variable-description-for-starwars-data.frame",
    "href": "posts/Beer Markets/BeerMarkets.html#variable-description-for-starwars-data.frame",
    "title": "BeerMarkets",
    "section": "Variable Description for starwars data.frame",
    "text": "Variable Description for starwars data.frame\nThe following describes the variables in the starwars data.frame.\n\nfilms List of films the character appeared in\nname Name of the character\nspecies Name of species\nheight Height (cm)\nmass Weight (kg)\nhair_color, skin_color, eye_color Hair, skin, and eye colors\nbirth_year Year born (BBY = Before Battle of Yavin)\nsex The biological sex of the character, namely male, female, hermaphroditic, or none (as in the case for Droids).\ngender The gender role or gender identity of the character as determined by their personality or the way they were programmed (as in the case for Droids).\nhomeworld Name of homeworld"
  },
  {
    "objectID": "posts/Beer Markets/BeerMarkets.html#human-vs.-droid",
    "href": "posts/Beer Markets/BeerMarkets.html#human-vs.-droid",
    "title": "BeerMarkets",
    "section": "Human vs. Droid",
    "text": "Human vs. Droid\n\nggplot(data = \n         starwars %&gt;% \n         filter(species %in% c(\"Human\", \"Droid\"))) +\n  geom_boxplot(aes(x = species, y = mass, \n                   fill = species),\n               show.legend = FALSE)"
  },
  {
    "objectID": "Classwork.html",
    "href": "Classwork.html",
    "title": "Classwork",
    "section": "",
    "text": "1 Loading R packages\nAbout this project 👏\n\nlibrary(tidyverse)\nlibrary(skimr)\n\n\n\n2 Question 1 - Billboard Charts\n\nThe following data is for Question 1:\n\n\nbillboard &lt;- read_csv('https://bcdanl.github.io/data/billboard.csv')\n\n\n\n3 Q1a.\n\nDescribe how the distribution of rating varies across week 1, week 2, and week 3 using the faceted histogram.\n\n#Q1b. * Which artist(s) have the most number of tracks in billboard data.frame? * Do not double-count an artist’s tracks if they appear in multiple weeks.\n#Q1c."
  },
  {
    "objectID": "posts/Beer Markets/BeerMarkets.html#variable-description-for-beer_markets-data.frame",
    "href": "posts/Beer Markets/BeerMarkets.html#variable-description-for-beer_markets-data.frame",
    "title": "BeerMarkets",
    "section": "Variable Description for Beer_Markets data.frame",
    "text": "Variable Description for Beer_Markets data.frame\nThe following describes the variables in the Beer_Markets data.frame.\n\nhh: an identifier of the household;\nX_purchase_desc: details on the purchased item;\nquantity: the number of items purchased;\nbrand: Bud Light, Busch Light, Coors Light, Miller Lite, or Natural Light;\ndollar_spent: total dollar value of purchase;\nbeer_floz: total volume of beer, in fluid ounces;\nprice_per_floz: price per fl.oz. (i.e., beer spent/beer floz);\ncontainer: the type of container;\npromo: Whether the item was promoted (coupon or otherwise);\nmarket: Scan-track market (or state if rural); demographic data, including gender, marital status, household income, class of work, race, education, age, the size of household, and whether or not the household has a microwave or a dishwasher."
  },
  {
    "objectID": "posts/Beer Markets/BeerMarkets.html#q2a.",
    "href": "posts/Beer Markets/BeerMarkets.html#q2a.",
    "title": "BeerMarkets",
    "section": "Q2a.",
    "text": "Q2a.\n\nFind the top 5 markets in terms of the total beer_floz.\nFind the top 5 markets in terms of the total beer_floz of BUD LIGHT.\nFind the top 5 markets in terms of the total beer_floz of BUSCH LIGHT.\nFind the top 5 markets in terms of the total beer_floz of COORS LIGHT.\nFind the top 5 markets in terms of the total beer_floz of MILLER LITE.\nFind the top 5 markets in terms of the total beer_floz of NATURAL LIGHT.\n\n\nQ2a1 &lt;- beer_mkts %&gt;% \n   group_by(market) %&gt;% \n   summarize(beer_floz_tot = sum(beer_floz, na.rm = T)) %&gt;% \n   arrange(-beer_floz_tot) %&gt;% \n   slice(1:5)\n\nQ2a_bud &lt;- beer_mkts %&gt;% \n  filter(brand == \"BUD LIGHT\") %&gt;% \n  group_by(market) %&gt;% \n  summarize(beer_floz_tot = sum(beer_floz, na.rm = T)) %&gt;% \n  arrange(-beer_floz_tot) %&gt;% \n  slice(1:5)\n\nQ2a_busch &lt;- beer_mkts %&gt;% \n  filter(brand == \"BUSCH LIGHT\") %&gt;% \n  group_by(market) %&gt;% \n  summarize(beer_floz_tot = sum(beer_floz, na.rm = T)) %&gt;% \n  arrange(-beer_floz_tot) %&gt;% \n  slice(1:5)\n\nQ2a_coors &lt;- beer_mkts %&gt;% \n  filter(brand == \"COORS LIGHT\") %&gt;% \n  group_by(market) %&gt;% \n  summarize(beer_floz_tot = sum(beer_floz, na.rm = T)) %&gt;% \n  arrange(-beer_floz_tot) %&gt;% \n  slice(1:5)\n\nQ2a_miller &lt;- beer_mkts %&gt;% \n  filter(brand == \"MILLER LITE\") %&gt;% \n  group_by(market) %&gt;% \n  summarize(beer_floz_tot = sum(beer_floz, na.rm = T)) %&gt;% \n  arrange(-beer_floz_tot) %&gt;% \n  slice(1:5)\n\nQ2a_natural &lt;- beer_mkts %&gt;% \n  filter(brand == \"NATURAL LIGHT\") %&gt;% \n  group_by(market) %&gt;% \n  summarize(beer_floz_tot = sum(beer_floz, na.rm = T)) %&gt;% \n  arrange(-beer_floz_tot) %&gt;% \n  slice(1:5)"
  },
  {
    "objectID": "posts/Beer Markets/BeerMarkets.html#q2b.",
    "href": "posts/Beer Markets/BeerMarkets.html#q2b.",
    "title": "BeerMarkets",
    "section": "Q2b.",
    "text": "Q2b.\n\nFor households that purchased BUD LIGHT at least once, what fraction of households did purchase only BUD LIGHT?\nFor households that purchased BUSCH LIGHT at least once, what fraction of households did purchase only BUSCH LIGHT?\nFor households that purchased COORS LIGHT at least once, what fraction of households did purchase only COORS LIGHT?\nFor households that purchased MILLER LITE at least once, what fraction of households did purchase only MILLER LITE?\nFor households that purchased NATURAL LIGHT at least once, what fraction of households did purchase only NATURAL LIGHT?\nWhich beer brand does have the largest proportion of such loyal consumers?\n\n\nq2b &lt;- beer_mkts %&gt;% \n  mutate(bud = ifelse(brand==\"BUD LIGHT\", 1, 0),\n         busch = ifelse(brand==\"BUSCH LIGHT\", 1, 0),\n         coors = ifelse(brand==\"COORS LIGHT\", 1, 0),\n         miller = ifelse(brand==\"MILLER LITE\", 1, 0),\n         natural = ifelse(brand==\"NATURAL LIGHT\", 1, 0),\n         .after = hh) %&gt;% \n  select(hh:natural) %&gt;% \n  group_by(hh) %&gt;% \n  summarise(n_transactions = n(), \n            n_bud = sum(bud), \n            n_busch = sum(busch), \n            n_coors = sum(coors), \n            n_miller = sum(miller), \n            n_natural = sum(natural) \n  ) %&gt;% \n  summarise(loyal_bud = sum(n_transactions == n_bud) / sum(n_bud &gt; 0), \n            loyal_busch = sum(n_transactions == n_busch) / sum(n_busch &gt; 0),\n            loyal_coors = sum(n_transactions == n_coors) / sum(n_coors &gt; 0),\n            loyal_miller = sum(n_transactions == n_miller) / sum(n_miller &gt; 0),\n            loyal_natural = sum(n_transactions == n_natural) / sum(n_natural &gt; 0)\n  )\nq2b\n\n# A tibble: 1 × 5\n  loyal_bud loyal_busch loyal_coors loyal_miller loyal_natural\n      &lt;dbl&gt;       &lt;dbl&gt;       &lt;dbl&gt;        &lt;dbl&gt;         &lt;dbl&gt;\n1     0.660       0.473       0.639        0.631         0.510"
  },
  {
    "objectID": "posts/Beer Markets/BeerMarkets.html#q2c.",
    "href": "posts/Beer Markets/BeerMarkets.html#q2c.",
    "title": "BeerMarkets",
    "section": "Q2c.",
    "text": "Q2c.\n\nFor each household, calculate the number of beer transactions.\nFor each household, calculate the proportion of each beer brand choice.\n\n\nq2c &lt;- beer_mkts %&gt;% \n  count(hh, brand) %&gt;% \n  group_by(hh) %&gt;% \n  mutate(n_tot = sum(n)) %&gt;%  \n  arrange(hh, brand) %&gt;% \n  mutate( prop = n / n_tot ) \nq2c\n\n# A tibble: 13,202 × 5\n# Groups:   hh [10,408]\n        hh brand           n n_tot  prop\n     &lt;dbl&gt; &lt;chr&gt;       &lt;int&gt; &lt;int&gt; &lt;dbl&gt;\n 1 2000235 BUD LIGHT       1     1 1    \n 2 2000417 COORS LIGHT     8     8 1    \n 3 2000711 COORS LIGHT    13    13 1    \n 4 2000946 BUD LIGHT       1     2 0.5  \n 5 2000946 MILLER LITE     1     2 0.5  \n 6 2001521 BUD LIGHT       6    11 0.545\n 7 2001521 COORS LIGHT     3    11 0.273\n 8 2001521 MILLER LITE     2    11 0.182\n 9 2001531 BUSCH LIGHT     1     1 1    \n10 2001581 BUSCH LIGHT     5     5 1    \n# ℹ 13,192 more rows"
  },
  {
    "objectID": "posts/Restaurant/Restaurant.html",
    "href": "posts/Restaurant/Restaurant.html",
    "title": "Restaurant",
    "section": "",
    "text": "Let’s analyze the restaurant data:\nrestaurant &lt;- read_csv(\"https://bcdanl.github.io/data/DOHMH_NYC_Restaurant_Inspection.csv\")"
  },
  {
    "objectID": "posts/Restaurant/Restaurant.html#variable-description-for-restaurant-data.frame",
    "href": "posts/Restaurant/Restaurant.html#variable-description-for-restaurant-data.frame",
    "title": "Restaurant",
    "section": "Variable Description for restaurant data.frame",
    "text": "Variable Description for restaurant data.frame\nThe following describes the variables in the restaurant data.frame.\n\nCAMIS This is an unique identifier for the entity (restaurant); 10-digit integer\nBORO Borough in which the entity (restaurant) is located.; • 1 = MANHATTAN • 2 = BRONX • 3 = BROOKLYN • 4 = QUEENS • 5 = STATEN ISLAND • 0 = Missing;\nCUISINE DESCRIPTION This field describes the entity (restaurant) cuisine.\nACTION This field represents the actions that is associated with each restaurant inspection. ; • Violations were cited in the following area(s). • No violations were recorded at the time of this inspection. • Establishment re-opened by DOHMH • Establishment re-closed by DOHMH • Establishment Closed by DOHMH. • Violations were cited in the following area(s) and those requiring immediate action were addressed.\nVIOLATION CODE Violation code associated with an establishment (restaurant) inspection\nVIOLATION DESCRIPTION Violation description associated with an establishment (restaurant) inspection\nCRITICAL FLAG Indicator of critical violation; • Critical • Not Critical • Not Applicable; Critical violations are those most likely to contribute to food-borne illness\nSCORE Total score for a particular inspection;\nGRADE Grade associated with the inspection; • N = Not Yet Graded • A = Grade A • B = Grade B • C = Grade C • Z = Grade Pending • P = Grade Pending issued on re-opening following an initial inspection that resulted in a closure"
  },
  {
    "objectID": "posts/Restaurant/Restaurant.html#q1c.",
    "href": "posts/Restaurant/Restaurant.html#q1c.",
    "title": "Restaurant",
    "section": "Q1c.",
    "text": "Q1c.\n\nProvide both (1) ggplot code and (2) a simple comment to describe how the distribution of SCORE varies by GRADE and CRITICAL FLAG.\n\n\nggplot(restaurant) +\n  geom_boxplot(aes(x = SCORE, y = GRADE, fill = GRADE) ) +\n  facet_grid( `CRITICAL FLAG` ~ . )\n\n\n\n\n\nHistograms\n\n\nggplot(restaurant) +\n  geom_histogram(aes(x = SCORE), binwidth = 1 ) +\n  facet_grid( `CRITICAL FLAG` ~ GRADE )\n\n\n\n\n\nHistograms with varying x- and y- scales across facets\n\n\nggplot(restaurant) +\n  geom_histogram(aes(x = SCORE), binwidth = 1 ) +\n  facet_wrap( `CRITICAL FLAG` ~ GRADE, scales = 'free' )"
  },
  {
    "objectID": "posts/NFL in 2022/NFL IN 2022.html",
    "href": "posts/NFL in 2022/NFL IN 2022.html",
    "title": "NFL in 2022",
    "section": "",
    "text": "Let’s analyze the NFL2022_stuffs data:\n\nNFL2022_stuffs &lt;- read_csv('https://bcdanl.github.io/data/NFL2022_stuffs.csv')\n\nrmarkdown::paged_table(NFL2022_stuffs) \n\n\n\n  \n\n\n\n\nThe following describes the variables in the NFL2022_stuffs data.frame.\n\nplay_id Numeric play identifier that when used with game_id and drive provides the unique identifier for a single play\ngame_id Ten digit identifier for NFL game\ndrive Numeric drive number in the game\nweek Season week\nposteam String abbreviation for the team with possession.\nqtr Quarter of the game (5 is overtime).\nhalf_seconds_remaining Numeric seconds remaining in the half.\ndown The down for the given play. Basically you get four attempts (aka downs) to move the ball 10 yards (by either running with it or passing it). If you make 10 yards then you get another set of four downs.\npass Binary indicator if the play was a pass play.\nwp Estimated winning probability for the posteam given the current situation at the start of the given play.\n\n\n\n\n\nIn data.frame, NFL2022_stuffs, remove observations for which values of posteam is missing.\n\n\nNFL2022_stuffs_filtered &lt;- NFL2022_stuffs %&gt;% filter(!is.na(posteam))\n\nprint(NFL2022_stuffs_filtered)\n\n# A tibble: 46,427 × 10\n   play_id game_id  drive  week posteam   qtr  down half_seconds_remaining  pass\n     &lt;dbl&gt; &lt;chr&gt;    &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;   &lt;dbl&gt; &lt;dbl&gt;                  &lt;dbl&gt; &lt;dbl&gt;\n 1      43 2022_01…     1     1 NYJ         1    NA                   1800     0\n 2      68 2022_01…     1     1 NYJ         1     1                   1796     0\n 3      89 2022_01…     1     1 NYJ         1     1                   1769     1\n 4     115 2022_01…     1     1 NYJ         1     2                   1765     0\n 5     136 2022_01…     1     1 NYJ         1     3                   1741     1\n 6     172 2022_01…     1     1 NYJ         1     4                   1733     0\n 7     202 2022_01…     2     1 BAL         1     1                   1722     1\n 8     230 2022_01…     2     1 BAL         1     2                   1701     1\n 9     254 2022_01…     2     1 BAL         1     3                   1661     0\n10     275 2022_01…     2     1 BAL         1     1                   1621     0\n# ℹ 46,417 more rows\n# ℹ 1 more variable: wp &lt;dbl&gt;\n\n\n\n\n\n\nSummarize the mean value of pass for each posteam when all the following conditions hold:\n\nwp is greater than 20% and less than 75%;\ndown is less than or equal to 2; and\nhalf_seconds_remaining is greater than 120.\n\n\n\nfiltered_data &lt;- NFL2022_stuffs %&gt;%\n  filter(\n    wp &gt; 0.20 & wp &lt; 0.75,\n    down &lt;= 2,\n    half_seconds_remaining &gt; 120\n  )\nsummary_data &lt;- filtered_data %&gt;%\n  group_by(posteam) %&gt;%\n  summarize(mean_pass = mean(pass, na.rm = TRUE))\nprint(summary_data)\n\n# A tibble: 32 × 2\n   posteam mean_pass\n   &lt;chr&gt;       &lt;dbl&gt;\n 1 ARI         0.553\n 2 ATL         0.4  \n 3 BAL         0.520\n 4 BUF         0.604\n 5 CAR         0.458\n 6 CHI         0.420\n 7 CIN         0.657\n 8 CLE         0.491\n 9 DAL         0.474\n10 DEN         0.493\n# ℹ 22 more rows\n\n\n\n\n\n\nProvide both (1) a ggplot code with geom_point() using the resulting data.frame in Q2b and (2) a simple comments to describe the mean value of pass for each posteam.\n\nIn the ggplot, reorder the posteam categories based on the mean value of pass in ascending or in descending order.\n\n\n\nfiltered_data &lt;- NFL2022_stuffs %&gt;%\n  filter(\n    wp &gt; 0.20 & wp &lt; 0.75,\n    down &lt;= 2,\n    half_seconds_remaining &gt; 120\n  )\nsummary_data &lt;- filtered_data %&gt;%\n  group_by(posteam) %&gt;%\n  summarize(mean_pass = mean(pass, na.rm = TRUE))\nsummary_data &lt;- summary_data %&gt;%\n  arrange(mean_pass)\nggplot(summary_data, aes(x = mean_pass, y = reorder(posteam, mean_pass))) +\n  geom_point() +\n  labs(title = \"Mean Value of pass for Each posteam\",\n       x = \"Percentage of pass plays\",\n       y = \"Team with possession\") +\n  theme_minimal()\n\n\n\n\n\nComment\n\nEvery NFL team falls somewhere within the .45 to .55 range. Washington runs the lowest percentage of pass plays while Cincinnati runs the highest percentage.\n\n\n\n\n\n\nConsider the following data.frame, NFL2022_epa:\n\n\nNFL2022_epa &lt;- read_csv('https://bcdanl.github.io/data/NFL2022_epa.csv')\n\nrmarkdown::paged_table(NFL2022_epa) \n\n\n\n  \n\n\n\nVariable description for NFL2022_epa\n\nplay_id: Numeric play identifier that when used with game_id and drive provides the unique identifier for a single play\ngame_id: Ten digit identifier for NFL game. drive: Numeric drive number in the game.\nposteam: String abbreviation for the team with possession. passer: Name of the player who passed a ball to a receiver by initially taking a three-step drop and backpedaling into the pocket to make a pass. (Mostly, they are quarterbacks)\nreceiver: Name of the receiver.\nepa: Expected points added (EPA) by the posteam for the given play.\n\nCreate the data.frame, NFL2022_stuffs_EPA, that includes\n\nAll the variables in the data.frame, NFL2022_stuffs;\nThe variables, passer, receiver, and epa, from the data.frame, NFL2022_epa. by joining the two data.frames.\n\nIn the resulting data.frame, NFL2022_stuffs_EPA, remove observations with NA in passer.\n\n\nNFL2022_stuffs_EPA &lt;- left_join(NFL2022_stuffs, NFL2022_epa %&gt;% select(game_id, passer, receiver, epa), by = \"game_id\")\nNFL2022_stuffs_EPA &lt;- NFL2022_stuffs_EPA %&gt;% filter(!is.na(passer))\nprint(NFL2022_stuffs_EPA)\n\n# A tibble: 3,997,285 × 13\n   play_id game_id  drive  week posteam   qtr  down half_seconds_remaining  pass\n     &lt;dbl&gt; &lt;chr&gt;    &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;   &lt;dbl&gt; &lt;dbl&gt;                  &lt;dbl&gt; &lt;dbl&gt;\n 1       1 2022_01…    NA     1 &lt;NA&gt;        1    NA                   1800     0\n 2       1 2022_01…    NA     1 &lt;NA&gt;        1    NA                   1800     0\n 3       1 2022_01…    NA     1 &lt;NA&gt;        1    NA                   1800     0\n 4       1 2022_01…    NA     1 &lt;NA&gt;        1    NA                   1800     0\n 5       1 2022_01…    NA     1 &lt;NA&gt;        1    NA                   1800     0\n 6       1 2022_01…    NA     1 &lt;NA&gt;        1    NA                   1800     0\n 7       1 2022_01…    NA     1 &lt;NA&gt;        1    NA                   1800     0\n 8       1 2022_01…    NA     1 &lt;NA&gt;        1    NA                   1800     0\n 9       1 2022_01…    NA     1 &lt;NA&gt;        1    NA                   1800     0\n10       1 2022_01…    NA     1 &lt;NA&gt;        1    NA                   1800     0\n# ℹ 3,997,275 more rows\n# ℹ 4 more variables: wp &lt;dbl&gt;, passer &lt;chr&gt;, receiver &lt;chr&gt;, epa &lt;dbl&gt;\n\n\n\n\n\n\nProvide both (1) a single ggplot and (2) a simple comment to describe the NFL weekly trend of weekly mean value of epa for each of the following two passers,\n\n\"J.Allen\"\n\"P.Mahomes\"\n\n\n\nselected_passers &lt;- c(\"J.Allen\", \"P.Mahomes\")\nfiltered_data &lt;- NFL2022_stuffs_EPA %&gt;%\n  filter(passer %in% selected_passers)\nfiltered_data &lt;- filtered_data %&gt;%\n  mutate(week_group = cut(as.numeric(week), breaks = seq(1, max(as.numeric(week)) + 5, by = 5), include.lowest = TRUE))\nfiltered_data$week_group &lt;- factor(filtered_data$week_group, levels = unique(filtered_data$week_group))\nmean_epa_by_week &lt;- filtered_data %&gt;%\n  group_by(passer, week) %&gt;%\n  summarize(mean_epa = mean(epa, na.rm = TRUE))\nggplot(mean_epa_by_week, aes(x = week, y = mean_epa, group = passer, color = passer)) +\n  geom_line() +\n  geom_point() +\n  labs(title = \"Mean EPA Comparison for J.Allen and P.Mahomes\",\n       x = \"Week\",\n       y = \"Mean EPA\",\n       color = \"Passer\") +\n  theme_minimal()\n\n\n\n\n\nComment\n\n‘J. Allen’ and ‘P. Mahomes’ exhibit distinct patterns, and the graph provides a clear comparison of their respective performances over the weeks, highlighting any notable differences or similarities in mean EPA values.”\n\n\n\n\n\n\nCalculate the difference between the mean value of epa for \"J.Allen\" the mean value of epa for \"P.Mahomes\" for each value of week.\n\n\nselected_passers &lt;- c(\"J.Allen\", \"P.Mahomes\")\nfiltered_data &lt;- NFL2022_stuffs_EPA %&gt;%\n  filter(passer %in% selected_passers)\nmean_epa_by_passer_and_week &lt;- filtered_data %&gt;%\n  group_by(passer, week) %&gt;%\n  summarize(mean_epa = mean(epa, na.rm = TRUE))\nwide_data &lt;- mean_epa_by_passer_and_week %&gt;%\n  pivot_wider(names_from = passer, values_from = mean_epa)\nwide_data &lt;- wide_data %&gt;%\n  mutate(epa_difference = `J.Allen` - `P.Mahomes`)\nprint(wide_data)\n\n# A tibble: 22 × 4\n    week J.Allen P.Mahomes epa_difference\n   &lt;dbl&gt;   &lt;dbl&gt;     &lt;dbl&gt;          &lt;dbl&gt;\n 1     1   0.530    0.698         -0.169 \n 2     2   0.487    0.148          0.339 \n 3     3   0.169    0.246         -0.0763\n 4     4   0.191    0.271         -0.0803\n 5     5   0.627    0.302          0.325 \n 6     6   0.307    0.133          0.173 \n 7     8   0.224   NA             NA     \n 8     9  -0.208    0.0965        -0.304 \n 9    10   0.161    0.589         -0.429 \n10    11   0.192    0.365         -0.173 \n# ℹ 12 more rows\n\n\n\n\n\n\nSummarize the resulting data.frame in Q2d, with the following four variables:\n\nposteam: String abbreviation for the team with possession.\npasser: Name of the player who passed a ball to a receiver by initially taking a three-step drop, and backpedaling into the pocket to make a pass. (Mostly, they are quarterbacks.)\nmean_epa: Mean value of epa in 2022 for each passer\nn_pass: Number of observations for each passer\n\nThen find the top 10 NFL passers in 2022 in terms of the mean value of epa, conditioning that n_pass must be greater than or equal to the third quantile level of n_pass.\n\n\nsummary_data &lt;- NFL2022_stuffs_EPA %&gt;%\n  group_by(posteam, passer) %&gt;%\n  summarize(\n    mean_epa = mean(epa, na.rm = TRUE),\n    n_pass = n(),\n    .groups = 'drop'\n  )\nquantile_threshold &lt;- quantile(summary_data$n_pass, 0.75)\ntop_passers &lt;- summary_data %&gt;%\n  filter(n_pass &gt;= quantile_threshold) %&gt;%\n  top_n(10, mean_epa)\nprint(top_passers)\n\n# A tibble: 10 × 4\n   posteam passer      mean_epa n_pass\n   &lt;chr&gt;   &lt;chr&gt;          &lt;dbl&gt;  &lt;int&gt;\n 1 BUF     J.Brissett     0.442   4160\n 2 CAR     J.Goff         0.359   4400\n 3 CHI     J.Goff         0.475   4711\n 4 CHI     K.Cousins      0.479   4198\n 5 IND     T.Lawrence     0.324   4961\n 6 JAX     P.Mahomes      0.455   5862\n 7 LA      J.Garoppolo    0.460   4452\n 8 MIN     J.Goff         0.289   7105\n 9 SEA     B.Purdy        0.477   5351\n10 TEN     T.Lawrence     0.296   6798"
  },
  {
    "objectID": "posts/NFL in 2022/NFL IN 2022.html#variable-description-for-starwars-data.frame",
    "href": "posts/NFL in 2022/NFL IN 2022.html#variable-description-for-starwars-data.frame",
    "title": "NFL in 2022",
    "section": "Variable Description for starwars data.frame",
    "text": "Variable Description for starwars data.frame\nThe following describes the variables in the starwars data.frame.\n\nfilms List of films the character appeared in\nname Name of the character\nspecies Name of species\nheight Height (cm)\nmass Weight (kg)\nhair_color, skin_color, eye_color Hair, skin, and eye colors\nbirth_year Year born (BBY = Before Battle of Yavin)\nsex The biological sex of the character, namely male, female, hermaphroditic, or none (as in the case for Droids).\ngender The gender role or gender identity of the character as determined by their personality or the way they were programmed (as in the case for Droids).\nhomeworld Name of homeworld"
  },
  {
    "objectID": "posts/NFL in 2022/NFL IN 2022.html#human-vs.-droid",
    "href": "posts/NFL in 2022/NFL IN 2022.html#human-vs.-droid",
    "title": "NFL in 2022",
    "section": "Human vs. Droid",
    "text": "Human vs. Droid\n\nggplot(data = \n         starwars %&gt;% \n         filter(species %in% c(\"Human\", \"Droid\"))) +\n  geom_boxplot(aes(x = species, y = mass, \n                   fill = species),\n               show.legend = FALSE)"
  },
  {
    "objectID": "posts/NFL in 2022/NFL IN 2022.html#variable-description-for-nfl2022_stuffs-data.frame",
    "href": "posts/NFL in 2022/NFL IN 2022.html#variable-description-for-nfl2022_stuffs-data.frame",
    "title": "NFL in 2022",
    "section": "",
    "text": "The following describes the variables in the NFL2022_stuffs data.frame.\n\nplay_id Numeric play identifier that when used with game_id and drive provides the unique identifier for a single play\ngame_id Ten digit identifier for NFL game\ndrive Numeric drive number in the game\nweek Season week\nposteam String abbreviation for the team with possession.\nqtr Quarter of the game (5 is overtime).\nhalf_seconds_remaining Numeric seconds remaining in the half.\ndown The down for the given play. Basically you get four attempts (aka downs) to move the ball 10 yards (by either running with it or passing it). If you make 10 yards then you get another set of four downs.\npass Binary indicator if the play was a pass play.\nwp Estimated winning probability for the posteam given the current situation at the start of the given play."
  },
  {
    "objectID": "posts/NFL in 2022/NFL IN 2022.html#q2a",
    "href": "posts/NFL in 2022/NFL IN 2022.html#q2a",
    "title": "NFL in 2022",
    "section": "",
    "text": "In data.frame, NFL2022_stuffs, remove observations for which values of posteam is missing.\n\n\nNFL2022_stuffs_filtered &lt;- NFL2022_stuffs %&gt;% filter(!is.na(posteam))\n\nprint(NFL2022_stuffs_filtered)\n\n# A tibble: 46,427 × 10\n   play_id game_id  drive  week posteam   qtr  down half_seconds_remaining  pass\n     &lt;dbl&gt; &lt;chr&gt;    &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;   &lt;dbl&gt; &lt;dbl&gt;                  &lt;dbl&gt; &lt;dbl&gt;\n 1      43 2022_01…     1     1 NYJ         1    NA                   1800     0\n 2      68 2022_01…     1     1 NYJ         1     1                   1796     0\n 3      89 2022_01…     1     1 NYJ         1     1                   1769     1\n 4     115 2022_01…     1     1 NYJ         1     2                   1765     0\n 5     136 2022_01…     1     1 NYJ         1     3                   1741     1\n 6     172 2022_01…     1     1 NYJ         1     4                   1733     0\n 7     202 2022_01…     2     1 BAL         1     1                   1722     1\n 8     230 2022_01…     2     1 BAL         1     2                   1701     1\n 9     254 2022_01…     2     1 BAL         1     3                   1661     0\n10     275 2022_01…     2     1 BAL         1     1                   1621     0\n# ℹ 46,417 more rows\n# ℹ 1 more variable: wp &lt;dbl&gt;"
  },
  {
    "objectID": "posts/NFL in 2022/NFL IN 2022.html#q2b.",
    "href": "posts/NFL in 2022/NFL IN 2022.html#q2b.",
    "title": "NFL in 2022",
    "section": "",
    "text": "Summarize the mean value of pass for each posteam when all the following conditions hold:\n\nwp is greater than 20% and less than 75%;\ndown is less than or equal to 2; and\nhalf_seconds_remaining is greater than 120.\n\n\n\nfiltered_data &lt;- NFL2022_stuffs %&gt;%\n  filter(\n    wp &gt; 0.20 & wp &lt; 0.75,\n    down &lt;= 2,\n    half_seconds_remaining &gt; 120\n  )\nsummary_data &lt;- filtered_data %&gt;%\n  group_by(posteam) %&gt;%\n  summarize(mean_pass = mean(pass, na.rm = TRUE))\nprint(summary_data)\n\n# A tibble: 32 × 2\n   posteam mean_pass\n   &lt;chr&gt;       &lt;dbl&gt;\n 1 ARI         0.553\n 2 ATL         0.4  \n 3 BAL         0.520\n 4 BUF         0.604\n 5 CAR         0.458\n 6 CHI         0.420\n 7 CIN         0.657\n 8 CLE         0.491\n 9 DAL         0.474\n10 DEN         0.493\n# ℹ 22 more rows"
  },
  {
    "objectID": "posts/NFL in 2022/NFL IN 2022.html#q2c.",
    "href": "posts/NFL in 2022/NFL IN 2022.html#q2c.",
    "title": "NFL in 2022",
    "section": "",
    "text": "Provide both (1) a ggplot code with geom_point() using the resulting data.frame in Q2b and (2) a simple comments to describe the mean value of pass for each posteam.\n\nIn the ggplot, reorder the posteam categories based on the mean value of pass in ascending or in descending order.\n\n\n\nfiltered_data &lt;- NFL2022_stuffs %&gt;%\n  filter(\n    wp &gt; 0.20 & wp &lt; 0.75,\n    down &lt;= 2,\n    half_seconds_remaining &gt; 120\n  )\nsummary_data &lt;- filtered_data %&gt;%\n  group_by(posteam) %&gt;%\n  summarize(mean_pass = mean(pass, na.rm = TRUE))\nsummary_data &lt;- summary_data %&gt;%\n  arrange(mean_pass)\nggplot(summary_data, aes(x = mean_pass, y = reorder(posteam, mean_pass))) +\n  geom_point() +\n  labs(title = \"Mean Value of pass for Each posteam\",\n       x = \"Percentage of pass plays\",\n       y = \"Team with possession\") +\n  theme_minimal()\n\n\n\n\n\nComment\n\nEvery NFL team falls somewhere within the .45 to .55 range. Washington runs the lowest percentage of pass plays while Cincinnati runs the highest percentage."
  },
  {
    "objectID": "posts/NFL in 2022/NFL IN 2022.html#q2d.",
    "href": "posts/NFL in 2022/NFL IN 2022.html#q2d.",
    "title": "NFL in 2022",
    "section": "",
    "text": "Consider the following data.frame, NFL2022_epa:\n\n\nNFL2022_epa &lt;- read_csv('https://bcdanl.github.io/data/NFL2022_epa.csv')\n\nrmarkdown::paged_table(NFL2022_epa) \n\n\n\n  \n\n\n\nVariable description for NFL2022_epa\n\nplay_id: Numeric play identifier that when used with game_id and drive provides the unique identifier for a single play\ngame_id: Ten digit identifier for NFL game. drive: Numeric drive number in the game.\nposteam: String abbreviation for the team with possession. passer: Name of the player who passed a ball to a receiver by initially taking a three-step drop and backpedaling into the pocket to make a pass. (Mostly, they are quarterbacks)\nreceiver: Name of the receiver.\nepa: Expected points added (EPA) by the posteam for the given play.\n\nCreate the data.frame, NFL2022_stuffs_EPA, that includes\n\nAll the variables in the data.frame, NFL2022_stuffs;\nThe variables, passer, receiver, and epa, from the data.frame, NFL2022_epa. by joining the two data.frames.\n\nIn the resulting data.frame, NFL2022_stuffs_EPA, remove observations with NA in passer.\n\n\nNFL2022_stuffs_EPA &lt;- left_join(NFL2022_stuffs, NFL2022_epa %&gt;% select(game_id, passer, receiver, epa), by = \"game_id\")\nNFL2022_stuffs_EPA &lt;- NFL2022_stuffs_EPA %&gt;% filter(!is.na(passer))\nprint(NFL2022_stuffs_EPA)\n\n# A tibble: 3,997,285 × 13\n   play_id game_id  drive  week posteam   qtr  down half_seconds_remaining  pass\n     &lt;dbl&gt; &lt;chr&gt;    &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;   &lt;dbl&gt; &lt;dbl&gt;                  &lt;dbl&gt; &lt;dbl&gt;\n 1       1 2022_01…    NA     1 &lt;NA&gt;        1    NA                   1800     0\n 2       1 2022_01…    NA     1 &lt;NA&gt;        1    NA                   1800     0\n 3       1 2022_01…    NA     1 &lt;NA&gt;        1    NA                   1800     0\n 4       1 2022_01…    NA     1 &lt;NA&gt;        1    NA                   1800     0\n 5       1 2022_01…    NA     1 &lt;NA&gt;        1    NA                   1800     0\n 6       1 2022_01…    NA     1 &lt;NA&gt;        1    NA                   1800     0\n 7       1 2022_01…    NA     1 &lt;NA&gt;        1    NA                   1800     0\n 8       1 2022_01…    NA     1 &lt;NA&gt;        1    NA                   1800     0\n 9       1 2022_01…    NA     1 &lt;NA&gt;        1    NA                   1800     0\n10       1 2022_01…    NA     1 &lt;NA&gt;        1    NA                   1800     0\n# ℹ 3,997,275 more rows\n# ℹ 4 more variables: wp &lt;dbl&gt;, passer &lt;chr&gt;, receiver &lt;chr&gt;, epa &lt;dbl&gt;"
  },
  {
    "objectID": "posts/NFL in 2022/NFL IN 2022.html#q2e.",
    "href": "posts/NFL in 2022/NFL IN 2022.html#q2e.",
    "title": "NFL in 2022",
    "section": "",
    "text": "Provide both (1) a single ggplot and (2) a simple comment to describe the NFL weekly trend of weekly mean value of epa for each of the following two passers,\n\n\"J.Allen\"\n\"P.Mahomes\"\n\n\n\nselected_passers &lt;- c(\"J.Allen\", \"P.Mahomes\")\nfiltered_data &lt;- NFL2022_stuffs_EPA %&gt;%\n  filter(passer %in% selected_passers)\nfiltered_data &lt;- filtered_data %&gt;%\n  mutate(week_group = cut(as.numeric(week), breaks = seq(1, max(as.numeric(week)) + 5, by = 5), include.lowest = TRUE))\nfiltered_data$week_group &lt;- factor(filtered_data$week_group, levels = unique(filtered_data$week_group))\nmean_epa_by_week &lt;- filtered_data %&gt;%\n  group_by(passer, week) %&gt;%\n  summarize(mean_epa = mean(epa, na.rm = TRUE))\nggplot(mean_epa_by_week, aes(x = week, y = mean_epa, group = passer, color = passer)) +\n  geom_line() +\n  geom_point() +\n  labs(title = \"Mean EPA Comparison for J.Allen and P.Mahomes\",\n       x = \"Week\",\n       y = \"Mean EPA\",\n       color = \"Passer\") +\n  theme_minimal()\n\n\n\n\n\nComment\n\n‘J. Allen’ and ‘P. Mahomes’ exhibit distinct patterns, and the graph provides a clear comparison of their respective performances over the weeks, highlighting any notable differences or similarities in mean EPA values.”"
  },
  {
    "objectID": "posts/NFL in 2022/NFL IN 2022.html#q2f.",
    "href": "posts/NFL in 2022/NFL IN 2022.html#q2f.",
    "title": "NFL in 2022",
    "section": "",
    "text": "Calculate the difference between the mean value of epa for \"J.Allen\" the mean value of epa for \"P.Mahomes\" for each value of week.\n\n\nselected_passers &lt;- c(\"J.Allen\", \"P.Mahomes\")\nfiltered_data &lt;- NFL2022_stuffs_EPA %&gt;%\n  filter(passer %in% selected_passers)\nmean_epa_by_passer_and_week &lt;- filtered_data %&gt;%\n  group_by(passer, week) %&gt;%\n  summarize(mean_epa = mean(epa, na.rm = TRUE))\nwide_data &lt;- mean_epa_by_passer_and_week %&gt;%\n  pivot_wider(names_from = passer, values_from = mean_epa)\nwide_data &lt;- wide_data %&gt;%\n  mutate(epa_difference = `J.Allen` - `P.Mahomes`)\nprint(wide_data)\n\n# A tibble: 22 × 4\n    week J.Allen P.Mahomes epa_difference\n   &lt;dbl&gt;   &lt;dbl&gt;     &lt;dbl&gt;          &lt;dbl&gt;\n 1     1   0.530    0.698         -0.169 \n 2     2   0.487    0.148          0.339 \n 3     3   0.169    0.246         -0.0763\n 4     4   0.191    0.271         -0.0803\n 5     5   0.627    0.302          0.325 \n 6     6   0.307    0.133          0.173 \n 7     8   0.224   NA             NA     \n 8     9  -0.208    0.0965        -0.304 \n 9    10   0.161    0.589         -0.429 \n10    11   0.192    0.365         -0.173 \n# ℹ 12 more rows"
  },
  {
    "objectID": "posts/NFL in 2022/NFL IN 2022.html#q2g.",
    "href": "posts/NFL in 2022/NFL IN 2022.html#q2g.",
    "title": "NFL in 2022",
    "section": "",
    "text": "Summarize the resulting data.frame in Q2d, with the following four variables:\n\nposteam: String abbreviation for the team with possession.\npasser: Name of the player who passed a ball to a receiver by initially taking a three-step drop, and backpedaling into the pocket to make a pass. (Mostly, they are quarterbacks.)\nmean_epa: Mean value of epa in 2022 for each passer\nn_pass: Number of observations for each passer\n\nThen find the top 10 NFL passers in 2022 in terms of the mean value of epa, conditioning that n_pass must be greater than or equal to the third quantile level of n_pass.\n\n\nsummary_data &lt;- NFL2022_stuffs_EPA %&gt;%\n  group_by(posteam, passer) %&gt;%\n  summarize(\n    mean_epa = mean(epa, na.rm = TRUE),\n    n_pass = n(),\n    .groups = 'drop'\n  )\nquantile_threshold &lt;- quantile(summary_data$n_pass, 0.75)\ntop_passers &lt;- summary_data %&gt;%\n  filter(n_pass &gt;= quantile_threshold) %&gt;%\n  top_n(10, mean_epa)\nprint(top_passers)\n\n# A tibble: 10 × 4\n   posteam passer      mean_epa n_pass\n   &lt;chr&gt;   &lt;chr&gt;          &lt;dbl&gt;  &lt;int&gt;\n 1 BUF     J.Brissett     0.442   4160\n 2 CAR     J.Goff         0.359   4400\n 3 CHI     J.Goff         0.475   4711\n 4 CHI     K.Cousins      0.479   4198\n 5 IND     T.Lawrence     0.324   4961\n 6 JAX     P.Mahomes      0.455   5862\n 7 LA      J.Garoppolo    0.460   4452\n 8 MIN     J.Goff         0.289   7105\n 9 SEA     B.Purdy        0.477   5351\n10 TEN     T.Lawrence     0.296   6798"
  },
  {
    "objectID": "DANL 200 HW 5.html",
    "href": "DANL 200 HW 5.html",
    "title": "DANL 200-HW5-Olson-Noah",
    "section": "",
    "text": "Provide a link for your Github repository https://github.com/JaydenBalcarczyk/JaydenBalcarczyk.github.io\n\n\n\n\n\nMake sure that your GitHub repository, named YOUR_GITHUB_USERNAME.github.io, is set to public.✅\nUpdate your website at https://YOUR_GITHUB_USERNAME.github.io/index.html to:\nInclude links to (1) your LinkedIn page, (2) GitHub page (https://github.com/YOUR_GITHUB_USERNAME), and (3) a PDF file of your Rèsume (https://YOUR_GITHUB_USERNAME.github.io/YOUR_RESUME.pdf).✅\nOffer a description of yourself, detailing your education background and professional experience. + Display your own profile picture with your face, not the one shown below.✅\n\n\n\n\n\nChange the title of your blog.✅\nThat is, to replace Insightful Analytics with your own blog name. Remove the blog posts Post With Code, Starwars, and Beer Markets.✅\nRevise the Welcome To My Blog post.✅\nPost three different blog articles based on data analysis using the following three CSV files: ✅\n\n\nhttps://bcdanl.github.io/data/DOHMH_NYC_Restaurant_Inspection.csv\nhttps://bcdanl.github.io/data/spotify_all.csv\nhttps://bcdanl.github.io/data/beer_markets.csv - - Make sure that each blog post has categories and is associated with a proper image file that is displayed as a thumbnail at the list page of the blog. - Make sure that each blog post uses emojis properly. (E.g., 😄 🍺 🎶 🍕)✅\n\n\nMake sure that each blog post includes its thumbnail image and at least three ggplot figures.✅\nYou can refer to the previous DANL 200 Homework Assignments and Exams for your blog posts."
  },
  {
    "objectID": "DANL 200 HW 5.html#q1a.",
    "href": "DANL 200 HW 5.html#q1a.",
    "title": "DANL 200-HW5-Olson-Noah",
    "section": "",
    "text": "Provide a link for your Github repository https://github.com/JaydenBalcarczyk/JaydenBalcarczyk.github.io"
  },
  {
    "objectID": "DANL 200 HW 5.html#q1b.",
    "href": "DANL 200 HW 5.html#q1b.",
    "title": "DANL 200-HW5-Olson-Noah",
    "section": "",
    "text": "Make sure that your GitHub repository, named YOUR_GITHUB_USERNAME.github.io, is set to public.✅\nUpdate your website at https://YOUR_GITHUB_USERNAME.github.io/index.html to:\nInclude links to (1) your LinkedIn page, (2) GitHub page (https://github.com/YOUR_GITHUB_USERNAME), and (3) a PDF file of your Rèsume (https://YOUR_GITHUB_USERNAME.github.io/YOUR_RESUME.pdf).✅\nOffer a description of yourself, detailing your education background and professional experience. + Display your own profile picture with your face, not the one shown below.✅"
  },
  {
    "objectID": "DANL 200 HW 5.html#q1c.",
    "href": "DANL 200 HW 5.html#q1c.",
    "title": "DANL 200-HW5-Olson-Noah",
    "section": "",
    "text": "Change the title of your blog.✅\nThat is, to replace Insightful Analytics with your own blog name. Remove the blog posts Post With Code, Starwars, and Beer Markets.✅\nRevise the Welcome To My Blog post.✅\nPost three different blog articles based on data analysis using the following three CSV files: ✅\n\n\nhttps://bcdanl.github.io/data/DOHMH_NYC_Restaurant_Inspection.csv\nhttps://bcdanl.github.io/data/spotify_all.csv\nhttps://bcdanl.github.io/data/beer_markets.csv - - Make sure that each blog post has categories and is associated with a proper image file that is displayed as a thumbnail at the list page of the blog. - Make sure that each blog post uses emojis properly. (E.g., 😄 🍺 🎶 🍕)✅\n\n\nMake sure that each blog post includes its thumbnail image and at least three ggplot figures.✅\nYou can refer to the previous DANL 200 Homework Assignments and Exams for your blog posts."
  },
  {
    "objectID": "DANL 200 HW 5.html#variable-description-for-nfl2022_stuffs-data.frame",
    "href": "DANL 200 HW 5.html#variable-description-for-nfl2022_stuffs-data.frame",
    "title": "DANL 200-HW5-Olson-Noah",
    "section": "Variable Description for NFL2022_stuffs data.frame",
    "text": "Variable Description for NFL2022_stuffs data.frame\nThe following describes the variables in the NFL2022_stuffs data.frame.\n\nplay_id Numeric play identifier that when used with game_id and drive provides the unique identifier for a single play\ngame_id Ten digit identifier for NFL game\ndrive Numeric drive number in the game\nweek Season week\nposteam String abbreviation for the team with possession.\nqtr Quarter of the game (5 is overtime).\nhalf_seconds_remaining Numeric seconds remaining in the half.\ndown The down for the given play. Basically you get four attempts (aka downs) to move the ball 10 yards (by either running with it or passing it). If you make 10 yards then you get another set of four downs.\npass Binary indicator if the play was a pass play.\nwp Estimated winning probability for the posteam given the current situation at the start of the given play."
  },
  {
    "objectID": "DANL 200 HW 5.html#q2a.",
    "href": "DANL 200 HW 5.html#q2a.",
    "title": "DANL 200-HW5-Olson-Noah",
    "section": "Q2a.",
    "text": "Q2a.\n\nIn data.frame, NFL2022_stuffs, remove observations for which values of posteam is missing.\n\n\nNFL2022_stuffs_filtered &lt;- NFL2022_stuffs %&gt;% filter(!is.na(posteam))\n\nprint(NFL2022_stuffs_filtered)\n\n# A tibble: 46,427 × 10\n   play_id game_id  drive  week posteam   qtr  down half_seconds_remaining  pass\n     &lt;dbl&gt; &lt;chr&gt;    &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;   &lt;dbl&gt; &lt;dbl&gt;                  &lt;dbl&gt; &lt;dbl&gt;\n 1      43 2022_01…     1     1 NYJ         1    NA                   1800     0\n 2      68 2022_01…     1     1 NYJ         1     1                   1796     0\n 3      89 2022_01…     1     1 NYJ         1     1                   1769     1\n 4     115 2022_01…     1     1 NYJ         1     2                   1765     0\n 5     136 2022_01…     1     1 NYJ         1     3                   1741     1\n 6     172 2022_01…     1     1 NYJ         1     4                   1733     0\n 7     202 2022_01…     2     1 BAL         1     1                   1722     1\n 8     230 2022_01…     2     1 BAL         1     2                   1701     1\n 9     254 2022_01…     2     1 BAL         1     3                   1661     0\n10     275 2022_01…     2     1 BAL         1     1                   1621     0\n# ℹ 46,417 more rows\n# ℹ 1 more variable: wp &lt;dbl&gt;"
  },
  {
    "objectID": "DANL 200 HW 5.html#q2b.",
    "href": "DANL 200 HW 5.html#q2b.",
    "title": "DANL 200-HW5-Olson-Noah",
    "section": "Q2b.",
    "text": "Q2b.\n\nSummarize the mean value of pass for each posteam when all the following conditions hold:\n\nwp is greater than 20% and less than 75%;\ndown is less than or equal to 2; and\nhalf_seconds_remaining is greater than 120.\n\n\n\nfiltered_data &lt;- NFL2022_stuffs %&gt;%\n  filter(\n    wp &gt; 0.20 & wp &lt; 0.75,\n    down &lt;= 2,\n    half_seconds_remaining &gt; 120\n  )\nsummary_data &lt;- filtered_data %&gt;%\n  group_by(posteam) %&gt;%\n  summarize(mean_pass = mean(pass, na.rm = TRUE))\nprint(summary_data)\n\n# A tibble: 32 × 2\n   posteam mean_pass\n   &lt;chr&gt;       &lt;dbl&gt;\n 1 ARI         0.553\n 2 ATL         0.4  \n 3 BAL         0.520\n 4 BUF         0.604\n 5 CAR         0.458\n 6 CHI         0.420\n 7 CIN         0.657\n 8 CLE         0.491\n 9 DAL         0.474\n10 DEN         0.493\n# ℹ 22 more rows"
  },
  {
    "objectID": "DANL 200 HW 5.html#q2c.",
    "href": "DANL 200 HW 5.html#q2c.",
    "title": "DANL 200-HW5-Olson-Noah",
    "section": "Q2c.",
    "text": "Q2c.\n\nProvide both (1) a ggplot code with geom_point() using the resulting data.frame in Q2b and (2) a simple comments to describe the mean value of pass for each posteam.\n\nIn the ggplot, reorder the posteam categories based on the mean value of pass in ascending or in descending order.\n\n\n\nfiltered_data &lt;- NFL2022_stuffs %&gt;%\n  filter(\n    wp &gt; 0.20 & wp &lt; 0.75,\n    down &lt;= 2,\n    half_seconds_remaining &gt; 120\n  )\nsummary_data &lt;- filtered_data %&gt;%\n  group_by(posteam) %&gt;%\n  summarize(mean_pass = mean(pass, na.rm = TRUE))\nsummary_data &lt;- summary_data %&gt;%\n  arrange(mean_pass)\nggplot(summary_data, aes(x = mean_pass, y = reorder(posteam, mean_pass))) +\n  geom_point() +\n  labs(title = \"Mean Value of pass for Each posteam\",\n       x = \"Percentage of pass plays\",\n       y = \"Team with possession\") +\n  theme_minimal()\n\n\n\n\n\nComment\n\nEvery NFL team falls somewhere within the .45 to .55 range. Washington runs the lowest percentage of pass plays while Cincinnati runs the highest percentage."
  },
  {
    "objectID": "DANL 200 HW 5.html#q2d.",
    "href": "DANL 200 HW 5.html#q2d.",
    "title": "DANL 200-HW5-Olson-Noah",
    "section": "Q2d.",
    "text": "Q2d.\n\nConsider the following data.frame, NFL2022_epa:\n\n\nNFL2022_epa &lt;- read_csv('https://bcdanl.github.io/data/NFL2022_epa.csv')\n\nRows: 46427 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): game_id, posteam, receiver, passer\ndbl (3): play_id, drive, epa\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nrmarkdown::paged_table(NFL2022_epa) \n\n\n\n  \n\n\n\nVariable description for NFL2022_epa\n\nplay_id: Numeric play identifier that when used with game_id and drive provides the unique identifier for a single play\ngame_id: Ten digit identifier for NFL game. drive: Numeric drive number in the game.\nposteam: String abbreviation for the team with possession. passer: Name of the player who passed a ball to a receiver by initially taking a three-step drop and backpedaling into the pocket to make a pass. (Mostly, they are quarterbacks)\nreceiver: Name of the receiver.\nepa: Expected points added (EPA) by the posteam for the given play.\n\nCreate the data.frame, NFL2022_stuffs_EPA, that includes\n\nAll the variables in the data.frame, NFL2022_stuffs;\nThe variables, passer, receiver, and epa, from the data.frame, NFL2022_epa. by joining the two data.frames.\n\nIn the resulting data.frame, NFL2022_stuffs_EPA, remove observations with NA in passer.\n\n\nNFL2022_stuffs_EPA &lt;- left_join(NFL2022_stuffs, NFL2022_epa %&gt;% select(game_id, passer, receiver, epa), by = \"game_id\")\n\nWarning in left_join(NFL2022_stuffs, NFL2022_epa %&gt;% select(game_id, passer, : Detected an unexpected many-to-many relationship between `x` and `y`.\nℹ Row 1 of `x` matches multiple rows in `y`.\nℹ Row 1 of `y` matches multiple rows in `x`.\nℹ If a many-to-many relationship is expected, set `relationship =\n  \"many-to-many\"` to silence this warning.\n\nNFL2022_stuffs_EPA &lt;- NFL2022_stuffs_EPA %&gt;% filter(!is.na(passer))\nprint(NFL2022_stuffs_EPA)\n\n# A tibble: 3,997,285 × 13\n   play_id game_id  drive  week posteam   qtr  down half_seconds_remaining  pass\n     &lt;dbl&gt; &lt;chr&gt;    &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;   &lt;dbl&gt; &lt;dbl&gt;                  &lt;dbl&gt; &lt;dbl&gt;\n 1       1 2022_01…    NA     1 &lt;NA&gt;        1    NA                   1800     0\n 2       1 2022_01…    NA     1 &lt;NA&gt;        1    NA                   1800     0\n 3       1 2022_01…    NA     1 &lt;NA&gt;        1    NA                   1800     0\n 4       1 2022_01…    NA     1 &lt;NA&gt;        1    NA                   1800     0\n 5       1 2022_01…    NA     1 &lt;NA&gt;        1    NA                   1800     0\n 6       1 2022_01…    NA     1 &lt;NA&gt;        1    NA                   1800     0\n 7       1 2022_01…    NA     1 &lt;NA&gt;        1    NA                   1800     0\n 8       1 2022_01…    NA     1 &lt;NA&gt;        1    NA                   1800     0\n 9       1 2022_01…    NA     1 &lt;NA&gt;        1    NA                   1800     0\n10       1 2022_01…    NA     1 &lt;NA&gt;        1    NA                   1800     0\n# ℹ 3,997,275 more rows\n# ℹ 4 more variables: wp &lt;dbl&gt;, passer &lt;chr&gt;, receiver &lt;chr&gt;, epa &lt;dbl&gt;"
  },
  {
    "objectID": "DANL 200 HW 5.html#q2e.",
    "href": "DANL 200 HW 5.html#q2e.",
    "title": "DANL 200-HW5-Olson-Noah",
    "section": "Q2e.",
    "text": "Q2e.\n\nProvide both (1) a single ggplot and (2) a simple comment to describe the NFL weekly trend of weekly mean value of epa for each of the following two passers,\n\n\"J.Allen\"\n\"P.Mahomes\"\n\n\n\nselected_passers &lt;- c(\"J.Allen\", \"P.Mahomes\")\nfiltered_data &lt;- NFL2022_stuffs_EPA %&gt;%\n  filter(passer %in% selected_passers)\nfiltered_data &lt;- filtered_data %&gt;%\n  mutate(week_group = cut(as.numeric(week), breaks = seq(1, max(as.numeric(week)) + 5, by = 5), include.lowest = TRUE))\nfiltered_data$week_group &lt;- factor(filtered_data$week_group, levels = unique(filtered_data$week_group))\nmean_epa_by_week &lt;- filtered_data %&gt;%\n  group_by(passer, week) %&gt;%\n  summarize(mean_epa = mean(epa, na.rm = TRUE))\n\n`summarise()` has grouped output by 'passer'. You can override using the\n`.groups` argument.\n\nggplot(mean_epa_by_week, aes(x = week, y = mean_epa, group = passer, color = passer)) +\n  geom_line() +\n  geom_point() +\n  labs(title = \"Mean EPA Comparison for J.Allen and P.Mahomes\",\n       x = \"Week\",\n       y = \"Mean EPA\",\n       color = \"Passer\") +\n  theme_minimal()\n\n\n\n\n\nComment\n\n‘J. Allen’ and ‘P. Mahomes’ exhibit distinct patterns, and the graph provides a clear comparison of their respective performances over the weeks, highlighting any notable differences or similarities in mean EPA values.”"
  },
  {
    "objectID": "DANL 200 HW 5.html#q2f.",
    "href": "DANL 200 HW 5.html#q2f.",
    "title": "DANL 200-HW5-Olson-Noah",
    "section": "Q2f.",
    "text": "Q2f.\n\nCalculate the difference between the mean value of epa for \"J.Allen\" the mean value of epa for \"P.Mahomes\" for each value of week.\n\n\nselected_passers &lt;- c(\"J.Allen\", \"P.Mahomes\")\nfiltered_data &lt;- NFL2022_stuffs_EPA %&gt;%\n  filter(passer %in% selected_passers)\nmean_epa_by_passer_and_week &lt;- filtered_data %&gt;%\n  group_by(passer, week) %&gt;%\n  summarize(mean_epa = mean(epa, na.rm = TRUE))\n\n`summarise()` has grouped output by 'passer'. You can override using the\n`.groups` argument.\n\nwide_data &lt;- mean_epa_by_passer_and_week %&gt;%\n  pivot_wider(names_from = passer, values_from = mean_epa)\nwide_data &lt;- wide_data %&gt;%\n  mutate(epa_difference = `J.Allen` - `P.Mahomes`)\nprint(wide_data)\n\n# A tibble: 22 × 4\n    week J.Allen P.Mahomes epa_difference\n   &lt;dbl&gt;   &lt;dbl&gt;     &lt;dbl&gt;          &lt;dbl&gt;\n 1     1   0.530    0.698         -0.169 \n 2     2   0.487    0.148          0.339 \n 3     3   0.169    0.246         -0.0763\n 4     4   0.191    0.271         -0.0803\n 5     5   0.627    0.302          0.325 \n 6     6   0.307    0.133          0.173 \n 7     8   0.224   NA             NA     \n 8     9  -0.208    0.0965        -0.304 \n 9    10   0.161    0.589         -0.429 \n10    11   0.192    0.365         -0.173 \n# ℹ 12 more rows"
  },
  {
    "objectID": "DANL 200 HW 5.html#q2g.",
    "href": "DANL 200 HW 5.html#q2g.",
    "title": "DANL 200-HW5-Olson-Noah",
    "section": "Q2g.",
    "text": "Q2g.\n\nSummarize the resulting data.frame in Q2d, with the following four variables:\n\nposteam: String abbreviation for the team with possession.\npasser: Name of the player who passed a ball to a receiver by initially taking a three-step drop, and backpedaling into the pocket to make a pass. (Mostly, they are quarterbacks.)\nmean_epa: Mean value of epa in 2022 for each passer\nn_pass: Number of observations for each passer\n\nThen find the top 10 NFL passers in 2022 in terms of the mean value of epa, conditioning that n_pass must be greater than or equal to the third quantile level of n_pass.\n\n\nsummary_data &lt;- NFL2022_stuffs_EPA %&gt;%\n  group_by(posteam, passer) %&gt;%\n  summarize(\n    mean_epa = mean(epa, na.rm = TRUE),\n    n_pass = n(),\n    .groups = 'drop'\n  )\nquantile_threshold &lt;- quantile(summary_data$n_pass, 0.75)\ntop_passers &lt;- summary_data %&gt;%\n  filter(n_pass &gt;= quantile_threshold) %&gt;%\n  top_n(10, mean_epa)\nprint(top_passers)\n\n# A tibble: 10 × 4\n   posteam passer      mean_epa n_pass\n   &lt;chr&gt;   &lt;chr&gt;          &lt;dbl&gt;  &lt;int&gt;\n 1 BUF     J.Brissett     0.442   4160\n 2 CAR     J.Goff         0.359   4400\n 3 CHI     J.Goff         0.475   4711\n 4 CHI     K.Cousins      0.479   4198\n 5 IND     T.Lawrence     0.324   4961\n 6 JAX     P.Mahomes      0.455   5862\n 7 LA      J.Garoppolo    0.460   4452\n 8 MIN     J.Goff         0.289   7105\n 9 SEA     B.Purdy        0.477   5351\n10 TEN     T.Lawrence     0.296   6798"
  },
  {
    "objectID": "project.html#ranking-boro-by-avg-score",
    "href": "project.html#ranking-boro-by-avg-score",
    "title": "DANL Project",
    "section": "2.2 Ranking BORO by AVG SCORE",
    "text": "2.2 Ranking BORO by AVG SCORE\n\nfiltered_data &lt;- restaurant %&gt;%\n  select(BORO, DBA, SCORE)\naverage_scores_by_boro &lt;- filtered_data %&gt;%\n  group_by(BORO, DBA) %&gt;%\n  summarise(AVG_SCORE = mean(SCORE, na.rm = TRUE), .groups = 'drop')\naverage_score_by_boro &lt;- average_scores_by_boro %&gt;%\n  group_by(BORO) %&gt;%\n  summarise(Overall_AVG_SCORE = mean(AVG_SCORE, na.rm = TRUE))\nprint(average_score_by_boro)\n\n# A tibble: 5 × 2\n  BORO          Overall_AVG_SCORE\n  &lt;chr&gt;                     &lt;dbl&gt;\n1 Bronx                      11.1\n2 Brooklyn                   10.6\n3 Manhattan                  10.4\n4 Queens                     11.2\n5 Staten Island              11.0"
  },
  {
    "objectID": "project.html#visualization-of-ranking-boro-by-avg-score",
    "href": "project.html#visualization-of-ranking-boro-by-avg-score",
    "title": "DANL Project",
    "section": "2.3 Visualization of ranking Boro by AVG SCORE",
    "text": "2.3 Visualization of ranking Boro by AVG SCORE\n\nggplot(average_score_by_boro, aes(x = BORO, y = Overall_AVG_SCORE, fill = BORO)) +\n  geom_bar(stat = \"identity\") +\n  labs(title = \"Average Score of DBAs in Each Borough\",\n       x = \"Borough\",\n       y = \"Average Score\") +\n  theme_minimal() +\n  scale_x_discrete(labels = scales::wrap_format(10))"
  },
  {
    "objectID": "project.html#analysis",
    "href": "project.html#analysis",
    "title": "DANL Project",
    "section": "2.4 Analysis",
    "text": "2.4 Analysis\n\nThis bar chart exemplifies the relationship between each Borough in NYC on the x-axis and the overall average score on the y-axis. The average score is based on DBA (Doing Business As) entities. The overall average scores in decreasing order went as follows: Queens, Bronx, Staten Island, Brooklyn, Manhattan. Queens had the highest DBA average score of 11.2 and Manhattan had the lowest average at a score of 10.4"
  },
  {
    "objectID": "project.html#amount-of-critical-critical-flag-by-boro",
    "href": "project.html#amount-of-critical-critical-flag-by-boro",
    "title": "DANL Project",
    "section": "2.5 Amount of CRITICAL CRITICAL FLAG by BORO",
    "text": "2.5 Amount of CRITICAL CRITICAL FLAG by BORO\n\nfiltered_data &lt;- restaurant %&gt;%\n  select(BORO, `CRITICAL FLAG`)\ncritical_flags_by_boro &lt;- filtered_data %&gt;%\n  filter(`CRITICAL FLAG` == \"Critical\") %&gt;%\n  group_by(BORO) %&gt;%\n  summarise(Critical_Flag_Count = n(), .groups = 'drop')\nprint(critical_flags_by_boro)\n\n# A tibble: 5 × 2\n  BORO          Critical_Flag_Count\n  &lt;chr&gt;                       &lt;int&gt;\n1 Bronx                         732\n2 Brooklyn                     2333\n3 Manhattan                    3464\n4 Queens                       2001\n5 Staten Island                 333"
  },
  {
    "objectID": "project.html#visualization-of-amount-of-critical-critical-flag-by-boro",
    "href": "project.html#visualization-of-amount-of-critical-critical-flag-by-boro",
    "title": "DANL Project",
    "section": "2.6 Visualization of amount of CRITICAL CRITICAL FLAG by BORO",
    "text": "2.6 Visualization of amount of CRITICAL CRITICAL FLAG by BORO\n\nggplot(critical_flags_by_boro, aes(x = BORO, y = Critical_Flag_Count, fill = BORO)) +\n  geom_bar(stat = \"identity\") +\n  labs(title = \"Count of Critical Flags by Borough\",\n       x = \"Borough\",\n       y = \"Critical Flag Count\") +\n  theme_minimal()"
  },
  {
    "objectID": "project.html#analysis-1",
    "href": "project.html#analysis-1",
    "title": "DANL Project",
    "section": "2.7 Analysis",
    "text": "2.7 Analysis\n\nThis bar chart compares the relationship between specific Boroughs in NYC to the total number of critical flags in those Borough. Boroughs being on the x-axis and the critical flag variable on the y-axis. The critical flag score represents the restaurants that had an indicator of critical violation. Each critical flag counts once towards the total for the Borough it is geographically located in. The order in decreasing totals was: Manhattan, Brooklyn, Queens, Bronx, Staten Island. Manhattan had the most critical flags at a total of 3464 which will be looked at later as Manhattan has a lot more restaurants than some of the others. While Staten Island had the least amount of critical flags at 333."
  },
  {
    "objectID": "project.html#total-number-of-a-grade-by-boro",
    "href": "project.html#total-number-of-a-grade-by-boro",
    "title": "DANL Project",
    "section": "2.8 Total number of A GRADE by BORO",
    "text": "2.8 Total number of A GRADE by BORO\n\nfiltered_data &lt;- restaurant %&gt;%\n  select(BORO, GRADE)\na_grades_by_boro &lt;- filtered_data %&gt;%\n  filter(GRADE == \"A\") %&gt;%\n  group_by(BORO) %&gt;%\n  summarise(A_Grade_Count = n(), .groups = 'drop')\nprint(a_grades_by_boro)\n\n# A tibble: 5 × 2\n  BORO          A_Grade_Count\n  &lt;chr&gt;                 &lt;int&gt;\n1 Bronx                  1316\n2 Brooklyn               4222\n3 Manhattan              6382\n4 Queens                 3740\n5 Staten Island           645"
  },
  {
    "objectID": "project.html#visualization-of-total-number-of-a-grade-by-boro",
    "href": "project.html#visualization-of-total-number-of-a-grade-by-boro",
    "title": "DANL Project",
    "section": "2.9 Visualization of Total number of A GRADE by BORO",
    "text": "2.9 Visualization of Total number of A GRADE by BORO\n\nggplot(a_grades_by_boro, aes(x = BORO, y = A_Grade_Count, fill = BORO)) +\n  geom_bar(stat = \"identity\") +\n  labs(title = \"Total Count of 'A' Grades by Borough\",\n       x = \"Borough\",\n       y = \"'A' Grade Count\") +\n  theme_minimal()"
  },
  {
    "objectID": "project.html#analysis-2",
    "href": "project.html#analysis-2",
    "title": "DANL Project",
    "section": "2.10 Analysis",
    "text": "2.10 Analysis\n-The bar chart above represents an R code used to manipulate data as well as visualize it. This manipulation is done so to exemplify the amount of restaurants that received a grade A from their inspection and summarizes and ranks each Borough based on their total number of “A” grades. With this manipulation all other grades are voided because the only desired grade for this bar chart is “A”. Boroughs are represented on the x-axis as the y-axis represents number of total Grade A inspections in the specific Borough. The ranking of Boroughs by total number of grade A’s from most to least is as follows: Manhattan, Brooklyn, Queens, Bronx, Staten Island. Manhattan had by far the most with 6382 again partially due to the sheer amount of restaurants in the Borough. Staten Island had the least amount of Grade A restaurant inspections with 645."
  },
  {
    "objectID": "project.html#total-number-of-c-grade-by-boro",
    "href": "project.html#total-number-of-c-grade-by-boro",
    "title": "DANL Project",
    "section": "2.11 Total number of C GRADE by BORO",
    "text": "2.11 Total number of C GRADE by BORO\n\nfiltered_data &lt;- restaurant %&gt;%\n  select(BORO, GRADE)\nc_grades_by_boro &lt;- filtered_data %&gt;%\n  filter(GRADE == \"C\") %&gt;%\n  group_by(BORO) %&gt;%\n  summarise(C_Grade_Count = n(), .groups = 'drop')\nprint(c_grades_by_boro)\n\n# A tibble: 5 × 2\n  BORO          C_Grade_Count\n  &lt;chr&gt;                 &lt;int&gt;\n1 Bronx                    25\n2 Brooklyn                 84\n3 Manhattan                97\n4 Queens                   83\n5 Staten Island             5"
  },
  {
    "objectID": "project.html#visualization-of-total-number-of-c-grade-by-boro",
    "href": "project.html#visualization-of-total-number-of-c-grade-by-boro",
    "title": "DANL Project",
    "section": "2.12 Visualization of Total number of C GRADE by BORO",
    "text": "2.12 Visualization of Total number of C GRADE by BORO\n\nfiltered_data &lt;- restaurant %&gt;%\n  select(BORO, DBA, GRADE)\na_grades_by_boro &lt;- filtered_data %&gt;%\n  filter(GRADE == \"C\") %&gt;%\n  group_by(BORO, DBA) %&gt;%\n  summarise(A_Grade_Count = n_distinct(DBA), .groups = 'drop')\nprint(a_grades_by_boro)\n\n# A tibble: 294 × 3\n   BORO  DBA                       A_Grade_Count\n   &lt;chr&gt; &lt;chr&gt;                             &lt;int&gt;\n 1 Bronx 3a's legacy salad & grill             1\n 2 Bronx african home restaurant               1\n 3 Bronx bambu juice bar                       1\n 4 Bronx bedford cafe & restaurant             1\n 5 Bronx bella pizza of bronx                  1\n 6 Bronx chickenfest azteca                    1\n 7 Bronx el barril restaurant                  1\n 8 Bronx el club valle restaurant              1\n 9 Bronx el nuevo bohio restaurant             1\n10 Bronx el nuevo roble billiards              1\n# ℹ 284 more rows\n\nggplot(a_grades_by_boro, aes(x = BORO, y = A_Grade_Count, fill = BORO)) +\n  geom_bar(stat = \"identity\") +\n  labs(title = \"Count of 'C' Grades by Borough\",\n       x = \"Borough\",\n       y = \"'C' Grade Count\") +\n  theme_minimal()"
  },
  {
    "objectID": "project.html#analysis-3",
    "href": "project.html#analysis-3",
    "title": "DANL Project",
    "section": "2.13 Analysis",
    "text": "2.13 Analysis\n\nA very similar example to the chart in 2.9 but instead of using data manipulation to find grade A inspection, we are looking to exemplify the inspections that received a “C” grade. The x-axis continues to represent the Boroughs of NYC and the y-axis this time represents the total number of restaurants that received a “C” grade in those Boroughs. No other grades are accounted for in this chart as they are dismissed. The ranking from most to least are as follows: Manhattan, Brooklyn, Queens, Bronx, Staten Island. Manhattan had a total of 97 which was the most and Staten Island had least amount of DBA’s with a inspection grade of “C” with 5."
  },
  {
    "objectID": "project.html#proportion-of-c-grade-dba-in-each-boro",
    "href": "project.html#proportion-of-c-grade-dba-in-each-boro",
    "title": "DANL Project",
    "section": "2.14 Proportion of C GRADE DBA in each BORO",
    "text": "2.14 Proportion of C GRADE DBA in each BORO\n\nfiltered_data &lt;- restaurant %&gt;%\n  select(BORO, DBA)\nfiltered_data$BORO[is.na(filtered_data$BORO)] &lt;- 0\ntotal_dbas_by_boro &lt;- filtered_data %&gt;%\n  group_by(BORO) %&gt;%\n  summarise(DBA_Count = n_distinct(DBA), .groups = 'drop')\nprint(total_dbas_by_boro)\n\n# A tibble: 5 × 2\n  BORO          DBA_Count\n  &lt;chr&gt;             &lt;int&gt;\n1 Bronx              1141\n2 Brooklyn           3964\n3 Manhattan          5404\n4 Queens             3404\n5 Staten Island       577\n\n25 / 1141 * 100\n\n[1] 2.19106\n\n84 / 3964 * 100\n\n[1] 2.119072\n\n97 / 5404 * 100\n\n[1] 1.794967\n\n83 / 3404 * 100\n\n[1] 2.438308\n\n5 / 577 * 100\n\n[1] 0.8665511"
  },
  {
    "objectID": "project.html#analysis-4",
    "href": "project.html#analysis-4",
    "title": "DANL Project",
    "section": "2.15 Analysis",
    "text": "2.15 Analysis\n\nIn this section of the analysis our goal was to determine the proportion of C ‘GRADE’ ‘DBA’ in each borough. Looking at the calculations above we took the total amount of restaurants with a grade of C in each borough and divided that amount by the total number of restaurants in that borough. Using this method we were able to get an accurate percentage of how many restaurants were given a grade of C in the respective boroughs. We concluded that Staten Island had the least amount of C grade restaurants at 0.87%, while Queens had the highest percentage of C grade boroughs at 2.44%."
  },
  {
    "objectID": "project.html#top-5-dba-in-terms-of-score-by-each-boro",
    "href": "project.html#top-5-dba-in-terms-of-score-by-each-boro",
    "title": "DANL Project",
    "section": "2.16 Top 5 DBA in terms of SCORE by each BORO",
    "text": "2.16 Top 5 DBA in terms of SCORE by each BORO\n\nfiltered_data &lt;- restaurant %&gt;%\n  select(BORO, DBA, SCORE)\ngrouped_data &lt;- filtered_data %&gt;%\n  group_by(BORO, DBA) %&gt;%\n  summarise(AVG_SCORE = mean(SCORE, na.rm = TRUE))\nranked_data &lt;- grouped_data %&gt;%\n  arrange(BORO, desc(AVG_SCORE)) %&gt;%\n  group_by(BORO) %&gt;%\n  mutate(rank = row_number())\ntop_5_dbas &lt;- ranked_data %&gt;%\n  filter(rank &lt;= 5)\nprint(top_5_dbas)\n\n# A tibble: 25 × 4\n# Groups:   BORO [5]\n   BORO     DBA                             AVG_SCORE  rank\n   &lt;chr&gt;    &lt;chr&gt;                               &lt;dbl&gt; &lt;int&gt;\n 1 Bronx    bedford cafe & restaurant              49     1\n 2 Bronx    g & s                                  47     2\n 3 Bronx    el club valle restaurant               46     3\n 4 Bronx    el barril restaurant                   45     4\n 5 Bronx    luna cafe                              44     5\n 6 Brooklyn flaming grill and modern buffet        66     1\n 7 Brooklyn casa publica                           62     2\n 8 Brooklyn mi candilejas restaurant               62     3\n 9 Brooklyn kami sushi, yummy thai                 61     4\n10 Brooklyn fulton burger                          59     5\n# ℹ 15 more rows\n\n\n\nfiltered_data &lt;- restaurant %&gt;%\n  select(BORO, DBA, SCORE)\ngrouped_data &lt;- filtered_data %&gt;%\n  group_by(BORO, DBA) %&gt;%\n  summarise(AVG_SCORE = mean(SCORE, na.rm = TRUE))\nranked_data &lt;- grouped_data %&gt;%\n  arrange(BORO, desc(AVG_SCORE)) %&gt;%\n  group_by(BORO) %&gt;%\n  mutate(rank = row_number())\ntop_5_dbas &lt;- ranked_data %&gt;%\n  filter(rank &lt;= 5)\nggplot(top_5_dbas, aes(x = reorder(DBA, AVG_SCORE), y = AVG_SCORE, fill = BORO)) +\n  geom_bar(stat = \"identity\", position = \"dodge\") +\n  labs(title = \"Top 5 Highest Scoring DBAs in Each Borough\",\n       x = \"DBA\",\n       y = \"Average Score\") +\n  theme_minimal() +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1))"
  },
  {
    "objectID": "project.html#average-score-of-top-5-dba-in-each-boro",
    "href": "project.html#average-score-of-top-5-dba-in-each-boro",
    "title": "DANL Project",
    "section": "2.17 Average SCORE of Top 5 DBA in each BORO",
    "text": "2.17 Average SCORE of Top 5 DBA in each BORO\n\n(49 + 47 + 46 + 45 + 44)/5\n\n[1] 46.2\n\n(66 + 62 + 62 + 61 + 59)/5\n\n[1] 62\n\n(71 + 65 + 61 + 60 + 59)/5\n\n[1] 63.2\n\n(86 + 67 + 65 + 58 + 57)/5\n\n[1] 66.6\n\n(38 + 32.5 + 31 + 30 + 28)/5\n\n[1] 31.9"
  },
  {
    "objectID": "project.html#analysis-5",
    "href": "project.html#analysis-5",
    "title": "DANL Project",
    "section": "2.18 Analysis",
    "text": "2.18 Analysis\n\nBy filtering, summarizing, then converting the data to a ggplot, we were able to sort the highest scoring restaurants by each borough. Looking at the graph, Staten Island has the lowest scoring restaurants, the Bronx has slightly higher scoring restaurants, Queens has a mix of both middle of the pack scoring restaurants, while also having the highest scoring restaurant. Brooklyn and Manhattan both have middle to high scoring restaurants. Using the average scores we calculated the overall rating, the top rated borough is Queens with a score of 66.6 while the lowest rating is Staten Island with an average rating of 31.9."
  },
  {
    "objectID": "project.html#top-5-cuisine-description-in-each-boro",
    "href": "project.html#top-5-cuisine-description-in-each-boro",
    "title": "DANL Project",
    "section": "2.19 Top 5 CUISINE DESCRIPTION in each BORO",
    "text": "2.19 Top 5 CUISINE DESCRIPTION in each BORO\n\nfiltered_data &lt;- restaurant %&gt;%\n  select(BORO, `CUISINE DESCRIPTION`)\ncounted_data &lt;- filtered_data %&gt;%\n  count(BORO, `CUISINE DESCRIPTION`, sort = TRUE)\ntop_5_cuisines &lt;- counted_data %&gt;%\n  group_by(BORO) %&gt;%\n  slice_max(n = 5, order_by = n)\nprint(top_5_cuisines)\n\n# A tibble: 25 × 3\n# Groups:   BORO [5]\n   BORO     `CUISINE DESCRIPTION`     n\n   &lt;chr&gt;    &lt;chr&gt;                 &lt;int&gt;\n 1 Bronx    American                224\n 2 Bronx    Chinese                 164\n 3 Bronx    Pizza                   145\n 4 Bronx    Latin American          117\n 5 Bronx    Chicken                  92\n 6 Brooklyn American                783\n 7 Brooklyn Chinese                 484\n 8 Brooklyn Coffee/Tea              383\n 9 Brooklyn Pizza                   295\n10 Brooklyn Caribbean               222\n# ℹ 15 more rows"
  },
  {
    "objectID": "project.html#visualization-of-top-5-cuisine-description-in-each-boro",
    "href": "project.html#visualization-of-top-5-cuisine-description-in-each-boro",
    "title": "DANL Project",
    "section": "2.20 Visualization of top 5 CUISINE DESCRIPTION in each BORO",
    "text": "2.20 Visualization of top 5 CUISINE DESCRIPTION in each BORO\n\nggplot(top_5_cuisines, aes(x = reorder(`CUISINE DESCRIPTION`, n), y = n, fill = BORO)) +\n  geom_bar(stat = \"identity\", position = \"dodge\") +\n  labs(title = \"Top 5 Cuisine Descriptions in Each Borough\",\n       x = \"Cuisine Description\",\n       y = \"Count\") +\n  theme_minimal() +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +\n  facet_wrap(~ BORO, scales = \"free_y\", ncol = 2)"
  }
]